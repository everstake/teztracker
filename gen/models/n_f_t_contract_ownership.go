// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTContractOwnership n f t contract ownership
// swagger:model NFTContractOwnership
type NFTContractOwnership struct {

	// multi owners
	// Required: true
	MultiOwners *int64 `json:"multi_owners"`

	// single owners
	// Required: true
	SingleOwners *int64 `json:"single_owners"`

	// unique holders num
	// Required: true
	UniqueHoldersNum *int64 `json:"unique_holders_num"`

	// whales count
	// Required: true
	WhalesCount *int64 `json:"whales_count"`
}

// Validate validates this n f t contract ownership
func (m *NFTContractOwnership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMultiOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueHoldersNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhalesCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTContractOwnership) validateMultiOwners(formats strfmt.Registry) error {

	if err := validate.Required("multi_owners", "body", m.MultiOwners); err != nil {
		return err
	}

	return nil
}

func (m *NFTContractOwnership) validateSingleOwners(formats strfmt.Registry) error {

	if err := validate.Required("single_owners", "body", m.SingleOwners); err != nil {
		return err
	}

	return nil
}

func (m *NFTContractOwnership) validateUniqueHoldersNum(formats strfmt.Registry) error {

	if err := validate.Required("unique_holders_num", "body", m.UniqueHoldersNum); err != nil {
		return err
	}

	return nil
}

func (m *NFTContractOwnership) validateWhalesCount(formats strfmt.Registry) error {

	if err := validate.Required("whales_count", "body", m.WhalesCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTContractOwnership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTContractOwnership) UnmarshalBinary(b []byte) error {
	var res NFTContractOwnership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
