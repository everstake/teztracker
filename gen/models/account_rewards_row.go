// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountRewardsRow account rewards row
// swagger:model AccountRewardsRow
type AccountRewardsRow struct {

	// baking
	// Required: true
	Baking *int64 `json:"baking"`

	// cycle
	// Required: true
	Cycle *int64 `json:"cycle"`

	// cycle end
	CycleEnd int64 `json:"cycleEnd,omitempty"`

	// cycle start
	CycleStart int64 `json:"cycleStart,omitempty"`

	// delegators
	// Required: true
	Delegators *int64 `json:"delegators"`

	// endorsements
	// Required: true
	Endorsements *int64 `json:"endorsements"`

	// fees
	// Required: true
	Fees *int64 `json:"fees"`

	// losses
	// Required: true
	Losses *int64 `json:"losses"`

	// staking balance
	// Required: true
	StakingBalance *int64 `json:"stakingBalance"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this account rewards row
func (m *AccountRewardsRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndorsements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLosses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStakingBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRewardsRow) validateBaking(formats strfmt.Registry) error {

	if err := validate.Required("baking", "body", m.Baking); err != nil {
		return err
	}

	return nil
}

func (m *AccountRewardsRow) validateCycle(formats strfmt.Registry) error {

	if err := validate.Required("cycle", "body", m.Cycle); err != nil {
		return err
	}

	return nil
}

func (m *AccountRewardsRow) validateDelegators(formats strfmt.Registry) error {

	if err := validate.Required("delegators", "body", m.Delegators); err != nil {
		return err
	}

	return nil
}

func (m *AccountRewardsRow) validateEndorsements(formats strfmt.Registry) error {

	if err := validate.Required("endorsements", "body", m.Endorsements); err != nil {
		return err
	}

	return nil
}

func (m *AccountRewardsRow) validateFees(formats strfmt.Registry) error {

	if err := validate.Required("fees", "body", m.Fees); err != nil {
		return err
	}

	return nil
}

func (m *AccountRewardsRow) validateLosses(formats strfmt.Registry) error {

	if err := validate.Required("losses", "body", m.Losses); err != nil {
		return err
	}

	return nil
}

func (m *AccountRewardsRow) validateStakingBalance(formats strfmt.Registry) error {

	if err := validate.Required("stakingBalance", "body", m.StakingBalance); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRewardsRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRewardsRow) UnmarshalBinary(b []byte) error {
	var res AccountRewardsRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
