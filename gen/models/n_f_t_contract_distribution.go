// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTContractDistribution n f t contract distribution
// swagger:model NFTContractDistribution
type NFTContractDistribution struct {

	// distribution
	// Required: true
	Distribution []*TokenHolderRow `json:"distribution"`

	// total token num
	// Required: true
	TotalTokenNum *int64 `json:"total_token_num"`

	// unique holders num
	// Required: true
	UniqueHoldersNum *int64 `json:"unique_holders_num"`
}

// Validate validates this n f t contract distribution
func (m *NFTContractDistribution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTokenNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueHoldersNum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTContractDistribution) validateDistribution(formats strfmt.Registry) error {

	if err := validate.Required("distribution", "body", m.Distribution); err != nil {
		return err
	}

	for i := 0; i < len(m.Distribution); i++ {
		if swag.IsZero(m.Distribution[i]) { // not required
			continue
		}

		if m.Distribution[i] != nil {
			if err := m.Distribution[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("distribution" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NFTContractDistribution) validateTotalTokenNum(formats strfmt.Registry) error {

	if err := validate.Required("total_token_num", "body", m.TotalTokenNum); err != nil {
		return err
	}

	return nil
}

func (m *NFTContractDistribution) validateUniqueHoldersNum(formats strfmt.Registry) error {

	if err := validate.Required("unique_holders_num", "body", m.UniqueHoldersNum); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTContractDistribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTContractDistribution) UnmarshalBinary(b []byte) error {
	var res NFTContractDistribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
