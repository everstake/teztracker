// Code generated by go-swagger; DO NOT EDIT.

package blocks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLostEndorsermentsAggCountHandlerFunc turns a function with the right signature into a get lost endorserments agg count handler
type GetLostEndorsermentsAggCountHandlerFunc func(GetLostEndorsermentsAggCountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLostEndorsermentsAggCountHandlerFunc) Handle(params GetLostEndorsermentsAggCountParams) middleware.Responder {
	return fn(params)
}

// GetLostEndorsermentsAggCountHandler interface for that can handle valid get lost endorserments agg count params
type GetLostEndorsermentsAggCountHandler interface {
	Handle(GetLostEndorsermentsAggCountParams) middleware.Responder
}

// NewGetLostEndorsermentsAggCount creates a new http.Handler for the get lost endorserments agg count operation
func NewGetLostEndorsermentsAggCount(ctx *middleware.Context, handler GetLostEndorsermentsAggCountHandler) *GetLostEndorsermentsAggCount {
	return &GetLostEndorsermentsAggCount{Context: ctx, Handler: handler}
}

/*GetLostEndorsermentsAggCount swagger:route GET /v2/data/{platform}/{network}/lost/endorsements/agg Blocks getLostEndorsermentsAggCount

GetLostEndorsermentsAggCount get lost endorserments agg count API

*/
type GetLostEndorsermentsAggCount struct {
	Context *middleware.Context
	Handler GetLostEndorsermentsAggCountHandler
}

func (o *GetLostEndorsermentsAggCount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLostEndorsermentsAggCountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
