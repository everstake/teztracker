// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/everstake/teztracker/gen/restapi/operations/accounts"
	"github.com/everstake/teztracker/gen/restapi/operations/app_info"
	"github.com/everstake/teztracker/gen/restapi/operations/assets"
	"github.com/everstake/teztracker/gen/restapi/operations/blocks"
	"github.com/everstake/teztracker/gen/restapi/operations/fees"
	"github.com/everstake/teztracker/gen/restapi/operations/mempool"
	"github.com/everstake/teztracker/gen/restapi/operations/operation_groups"
	"github.com/everstake/teztracker/gen/restapi/operations/operations_list"
	"github.com/everstake/teztracker/gen/restapi/operations/profile"
	"github.com/everstake/teztracker/gen/restapi/operations/voting"
	"github.com/everstake/teztracker/gen/restapi/operations/w_s"
)

// NewTezTrackerAPI creates a new TezTracker instance
func NewTezTrackerAPI(spec *loads.Document) *TezTrackerAPI {
	return &TezTrackerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		CsvProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("csv producer has not yet been implemented")
		}),
		WsConnectToWSHandler: w_s.ConnectToWSHandlerFunc(func(params w_s.ConnectToWSParams) middleware.Responder {
			return middleware.NotImplemented("operation WsConnectToWS has not yet been implemented")
		}),
		ProfileCreateOrUpdateNoteHandler: profile.CreateOrUpdateNoteHandlerFunc(func(params profile.CreateOrUpdateNoteParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileCreateOrUpdateNote has not yet been implemented")
		}),
		ProfileCreateOrUpdateUserAddressHandler: profile.CreateOrUpdateUserAddressHandlerFunc(func(params profile.CreateOrUpdateUserAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileCreateOrUpdateUserAddress has not yet been implemented")
		}),
		ProfileDeleteUserAddressHandler: profile.DeleteUserAddressHandlerFunc(func(params profile.DeleteUserAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileDeleteUserAddress has not yet been implemented")
		}),
		ProfileDeleteUserNoteHandler: profile.DeleteUserNoteHandlerFunc(func(params profile.DeleteUserNoteParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileDeleteUserNote has not yet been implemented")
		}),
		AccountsGetAccountHandler: accounts.GetAccountHandlerFunc(func(params accounts.GetAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccount has not yet been implemented")
		}),
		AccountsGetAccountAssetsBalancesListHandler: accounts.GetAccountAssetsBalancesListHandlerFunc(func(params accounts.GetAccountAssetsBalancesListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountAssetsBalancesList has not yet been implemented")
		}),
		AccountsGetAccountBakedBlocksListHandler: accounts.GetAccountBakedBlocksListHandlerFunc(func(params accounts.GetAccountBakedBlocksListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountBakedBlocksList has not yet been implemented")
		}),
		AccountsGetAccountBakingListHandler: accounts.GetAccountBakingListHandlerFunc(func(params accounts.GetAccountBakingListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountBakingList has not yet been implemented")
		}),
		AccountsGetAccountBalanceListHandler: accounts.GetAccountBalanceListHandlerFunc(func(params accounts.GetAccountBalanceListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountBalanceList has not yet been implemented")
		}),
		AccountsGetAccountDelegatorsHandler: accounts.GetAccountDelegatorsHandlerFunc(func(params accounts.GetAccountDelegatorsParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountDelegators has not yet been implemented")
		}),
		AccountsGetAccountDelegatorsByCycleListHandler: accounts.GetAccountDelegatorsByCycleListHandlerFunc(func(params accounts.GetAccountDelegatorsByCycleListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountDelegatorsByCycleList has not yet been implemented")
		}),
		AccountsGetAccountEndorsementsByCycleListHandler: accounts.GetAccountEndorsementsByCycleListHandlerFunc(func(params accounts.GetAccountEndorsementsByCycleListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountEndorsementsByCycleList has not yet been implemented")
		}),
		AccountsGetAccountEndorsingListHandler: accounts.GetAccountEndorsingListHandlerFunc(func(params accounts.GetAccountEndorsingListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountEndorsingList has not yet been implemented")
		}),
		AccountsGetAccountFutureBakingHandler: accounts.GetAccountFutureBakingHandlerFunc(func(params accounts.GetAccountFutureBakingParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountFutureBaking has not yet been implemented")
		}),
		AccountsGetAccountFutureBakingRightsByCycleHandler: accounts.GetAccountFutureBakingRightsByCycleHandlerFunc(func(params accounts.GetAccountFutureBakingRightsByCycleParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountFutureBakingRightsByCycle has not yet been implemented")
		}),
		AccountsGetAccountFutureEndorsementRightsByCycleHandler: accounts.GetAccountFutureEndorsementRightsByCycleHandlerFunc(func(params accounts.GetAccountFutureEndorsementRightsByCycleParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountFutureEndorsementRightsByCycle has not yet been implemented")
		}),
		AccountsGetAccountFutureEndorsingHandler: accounts.GetAccountFutureEndorsingHandlerFunc(func(params accounts.GetAccountFutureEndorsingParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountFutureEndorsing has not yet been implemented")
		}),
		AccountsGetAccountReportHandler: accounts.GetAccountReportHandlerFunc(func(params accounts.GetAccountReportParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountReport has not yet been implemented")
		}),
		AccountsGetAccountRewardsListHandler: accounts.GetAccountRewardsListHandlerFunc(func(params accounts.GetAccountRewardsListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountRewardsList has not yet been implemented")
		}),
		AccountsGetAccountSecurityDepositListHandler: accounts.GetAccountSecurityDepositListHandlerFunc(func(params accounts.GetAccountSecurityDepositListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountSecurityDepositList has not yet been implemented")
		}),
		AccountsGetAccountTotalBakingHandler: accounts.GetAccountTotalBakingHandlerFunc(func(params accounts.GetAccountTotalBakingParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountTotalBaking has not yet been implemented")
		}),
		AccountsGetAccountTotalEndorsingHandler: accounts.GetAccountTotalEndorsingHandlerFunc(func(params accounts.GetAccountTotalEndorsingParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountTotalEndorsing has not yet been implemented")
		}),
		AccountsGetAccountsListHandler: accounts.GetAccountsListHandlerFunc(func(params accounts.GetAccountsListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountsList has not yet been implemented")
		}),
		AccountsGetAccountsTopBalanceListHandler: accounts.GetAccountsTopBalanceListHandlerFunc(func(params accounts.GetAccountsTopBalanceListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetAccountsTopBalanceList has not yet been implemented")
		}),
		AssetsGetAssetOperationsListHandler: assets.GetAssetOperationsListHandlerFunc(func(params assets.GetAssetOperationsListParams) middleware.Responder {
			return middleware.NotImplemented("operation AssetsGetAssetOperationsList has not yet been implemented")
		}),
		AssetsGetAssetReportHandler: assets.GetAssetReportHandlerFunc(func(params assets.GetAssetReportParams) middleware.Responder {
			return middleware.NotImplemented("operation AssetsGetAssetReport has not yet been implemented")
		}),
		AssetsGetAssetTokenHoldersListHandler: assets.GetAssetTokenHoldersListHandlerFunc(func(params assets.GetAssetTokenHoldersListParams) middleware.Responder {
			return middleware.NotImplemented("operation AssetsGetAssetTokenHoldersList has not yet been implemented")
		}),
		AssetsGetAssetTokenInfoHandler: assets.GetAssetTokenInfoHandlerFunc(func(params assets.GetAssetTokenInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation AssetsGetAssetTokenInfo has not yet been implemented")
		}),
		AssetsGetAssetsListHandler: assets.GetAssetsListHandlerFunc(func(params assets.GetAssetsListParams) middleware.Responder {
			return middleware.NotImplemented("operation AssetsGetAssetsList has not yet been implemented")
		}),
		FeesGetAvgFeesHandler: fees.GetAvgFeesHandlerFunc(func(params fees.GetAvgFeesParams) middleware.Responder {
			return middleware.NotImplemented("operation FeesGetAvgFees has not yet been implemented")
		}),
		AppInfoGetBakerChartInfoHandler: app_info.GetBakerChartInfoHandlerFunc(func(params app_info.GetBakerChartInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation AppInfoGetBakerChartInfo has not yet been implemented")
		}),
		AccountsGetBakersListHandler: accounts.GetBakersListHandlerFunc(func(params accounts.GetBakersListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetBakersList has not yet been implemented")
		}),
		BlocksGetBakingRightsHandler: blocks.GetBakingRightsHandlerFunc(func(params blocks.GetBakingRightsParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetBakingRights has not yet been implemented")
		}),
		VotingGetBallotsByPeriodIDHandler: voting.GetBallotsByPeriodIDHandlerFunc(func(params voting.GetBallotsByPeriodIDParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetBallotsByPeriodID has not yet been implemented")
		}),
		BlocksGetBlockHandler: blocks.GetBlockHandlerFunc(func(params blocks.GetBlockParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetBlock has not yet been implemented")
		}),
		BlocksGetBlockBakingRightsHandler: blocks.GetBlockBakingRightsHandlerFunc(func(params blocks.GetBlockBakingRightsParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetBlockBakingRights has not yet been implemented")
		}),
		BlocksGetBlockEndorsementsHandler: blocks.GetBlockEndorsementsHandlerFunc(func(params blocks.GetBlockEndorsementsParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetBlockEndorsements has not yet been implemented")
		}),
		BlocksGetBlocksHeadHandler: blocks.GetBlocksHeadHandlerFunc(func(params blocks.GetBlocksHeadParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetBlocksHead has not yet been implemented")
		}),
		BlocksGetBlocksListHandler: blocks.GetBlocksListHandlerFunc(func(params blocks.GetBlocksListParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetBlocksList has not yet been implemented")
		}),
		AppInfoGetBlocksPriorityChartInfoHandler: app_info.GetBlocksPriorityChartInfoHandlerFunc(func(params app_info.GetBlocksPriorityChartInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation AppInfoGetBlocksPriorityChartInfo has not yet been implemented")
		}),
		AppInfoGetChartsInfoHandler: app_info.GetChartsInfoHandlerFunc(func(params app_info.GetChartsInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation AppInfoGetChartsInfo has not yet been implemented")
		}),
		AccountsGetContractsListHandler: accounts.GetContractsListHandlerFunc(func(params accounts.GetContractsListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetContractsList has not yet been implemented")
		}),
		OperationsListGetDoubleBakingsListHandler: operations_list.GetDoubleBakingsListHandlerFunc(func(params operations_list.GetDoubleBakingsListParams) middleware.Responder {
			return middleware.NotImplemented("operation OperationsListGetDoubleBakingsList has not yet been implemented")
		}),
		OperationsListGetDoubleEndorsementsListHandler: operations_list.GetDoubleEndorsementsListHandlerFunc(func(params operations_list.GetDoubleEndorsementsListParams) middleware.Responder {
			return middleware.NotImplemented("operation OperationsListGetDoubleEndorsementsList has not yet been implemented")
		}),
		BlocksGetFutureBakingRightsHandler: blocks.GetFutureBakingRightsHandlerFunc(func(params blocks.GetFutureBakingRightsParams) middleware.Responder {
			return middleware.NotImplemented("operation BlocksGetFutureBakingRights has not yet been implemented")
		}),
		AppInfoGetHealthCheckInfoHandler: app_info.GetHealthCheckInfoHandlerFunc(func(params app_info.GetHealthCheckInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation AppInfoGetHealthCheckInfo has not yet been implemented")
		}),
		AppInfoGetInfoHandler: app_info.GetInfoHandlerFunc(func(params app_info.GetInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation AppInfoGetInfo has not yet been implemented")
		}),
		MempoolGetMempoolOperationsHandler: mempool.GetMempoolOperationsHandlerFunc(func(params mempool.GetMempoolOperationsParams) middleware.Responder {
			return middleware.NotImplemented("operation MempoolGetMempoolOperations has not yet been implemented")
		}),
		VotingGetNonVotersByPeriodIDHandler: voting.GetNonVotersByPeriodIDHandlerFunc(func(params voting.GetNonVotersByPeriodIDParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetNonVotersByPeriodID has not yet been implemented")
		}),
		OperationGroupsGetOperationGroupHandler: operation_groups.GetOperationGroupHandlerFunc(func(params operation_groups.GetOperationGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation OperationGroupsGetOperationGroup has not yet been implemented")
		}),
		OperationGroupsGetOperationGroupsHandler: operation_groups.GetOperationGroupsHandlerFunc(func(params operation_groups.GetOperationGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation OperationGroupsGetOperationGroups has not yet been implemented")
		}),
		OperationsListGetOperationsListHandler: operations_list.GetOperationsListHandlerFunc(func(params operations_list.GetOperationsListParams) middleware.Responder {
			return middleware.NotImplemented("operation OperationsListGetOperationsList has not yet been implemented")
		}),
		VotingGetPeriodHandler: voting.GetPeriodHandlerFunc(func(params voting.GetPeriodParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetPeriod has not yet been implemented")
		}),
		VotingGetPeriodsListHandler: voting.GetPeriodsListHandlerFunc(func(params voting.GetPeriodsListParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetPeriodsList has not yet been implemented")
		}),
		VotingGetProposalVotesListHandler: voting.GetProposalVotesListHandlerFunc(func(params voting.GetProposalVotesListParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetProposalVotesList has not yet been implemented")
		}),
		VotingGetProposalsByPeriodIDHandler: voting.GetProposalsByPeriodIDHandlerFunc(func(params voting.GetProposalsByPeriodIDParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetProposalsByPeriodID has not yet been implemented")
		}),
		VotingGetProtocolsListHandler: voting.GetProtocolsListHandlerFunc(func(params voting.GetProtocolsListParams) middleware.Responder {
			return middleware.NotImplemented("operation VotingGetProtocolsList has not yet been implemented")
		}),
		AccountsGetPublicBakersListHandler: accounts.GetPublicBakersListHandlerFunc(func(params accounts.GetPublicBakersListParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetPublicBakersList has not yet been implemented")
		}),
		AccountsGetPublicBakersListForSearchHandler: accounts.GetPublicBakersListForSearchHandlerFunc(func(params accounts.GetPublicBakersListForSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountsGetPublicBakersListForSearch has not yet been implemented")
		}),
		GetSnapshotsHandler: GetSnapshotsHandlerFunc(func(params GetSnapshotsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSnapshots has not yet been implemented")
		}),
		AppInfoGetThirdPartyBakersHandlerHandler: app_info.GetThirdPartyBakersHandlerHandlerFunc(func(params app_info.GetThirdPartyBakersHandlerParams) middleware.Responder {
			return middleware.NotImplemented("operation AppInfoGetThirdPartyBakersHandler has not yet been implemented")
		}),
		ProfileGetUserAddressesHandler: profile.GetUserAddressesHandlerFunc(func(params profile.GetUserAddressesParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileGetUserAddresses has not yet been implemented")
		}),
		ProfileGetUserNotesHandler: profile.GetUserNotesHandlerFunc(func(params profile.GetUserNotesParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileGetUserNotes has not yet been implemented")
		}),
		ProfileGetUserProfileHandler: profile.GetUserProfileHandlerFunc(func(params profile.GetUserProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileGetUserProfile has not yet been implemented")
		}),
		ProfileUpdateProfileHandler: profile.UpdateProfileHandlerFunc(func(params profile.UpdateProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileUpdateProfile has not yet been implemented")
		}),
		ProfileVerifyEmailHandler: profile.VerifyEmailHandlerFunc(func(params profile.VerifyEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileVerifyEmail has not yet been implemented")
		}),
		ProfileVerifyEmailTokenHandler: profile.VerifyEmailTokenHandlerFunc(func(params profile.VerifyEmailTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileVerifyEmailToken has not yet been implemented")
		}),
	}
}

/*TezTrackerAPI the tez tracker API */
type TezTrackerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// CsvProducer registers a producer for a "text/csv" mime type
	CsvProducer runtime.Producer

	// WsConnectToWSHandler sets the operation handler for the connect to w s operation
	WsConnectToWSHandler w_s.ConnectToWSHandler
	// ProfileCreateOrUpdateNoteHandler sets the operation handler for the create or update note operation
	ProfileCreateOrUpdateNoteHandler profile.CreateOrUpdateNoteHandler
	// ProfileCreateOrUpdateUserAddressHandler sets the operation handler for the create or update user address operation
	ProfileCreateOrUpdateUserAddressHandler profile.CreateOrUpdateUserAddressHandler
	// ProfileDeleteUserAddressHandler sets the operation handler for the delete user address operation
	ProfileDeleteUserAddressHandler profile.DeleteUserAddressHandler
	// ProfileDeleteUserNoteHandler sets the operation handler for the delete user note operation
	ProfileDeleteUserNoteHandler profile.DeleteUserNoteHandler
	// AccountsGetAccountHandler sets the operation handler for the get account operation
	AccountsGetAccountHandler accounts.GetAccountHandler
	// AccountsGetAccountAssetsBalancesListHandler sets the operation handler for the get account assets balances list operation
	AccountsGetAccountAssetsBalancesListHandler accounts.GetAccountAssetsBalancesListHandler
	// AccountsGetAccountBakedBlocksListHandler sets the operation handler for the get account baked blocks list operation
	AccountsGetAccountBakedBlocksListHandler accounts.GetAccountBakedBlocksListHandler
	// AccountsGetAccountBakingListHandler sets the operation handler for the get account baking list operation
	AccountsGetAccountBakingListHandler accounts.GetAccountBakingListHandler
	// AccountsGetAccountBalanceListHandler sets the operation handler for the get account balance list operation
	AccountsGetAccountBalanceListHandler accounts.GetAccountBalanceListHandler
	// AccountsGetAccountDelegatorsHandler sets the operation handler for the get account delegators operation
	AccountsGetAccountDelegatorsHandler accounts.GetAccountDelegatorsHandler
	// AccountsGetAccountDelegatorsByCycleListHandler sets the operation handler for the get account delegators by cycle list operation
	AccountsGetAccountDelegatorsByCycleListHandler accounts.GetAccountDelegatorsByCycleListHandler
	// AccountsGetAccountEndorsementsByCycleListHandler sets the operation handler for the get account endorsements by cycle list operation
	AccountsGetAccountEndorsementsByCycleListHandler accounts.GetAccountEndorsementsByCycleListHandler
	// AccountsGetAccountEndorsingListHandler sets the operation handler for the get account endorsing list operation
	AccountsGetAccountEndorsingListHandler accounts.GetAccountEndorsingListHandler
	// AccountsGetAccountFutureBakingHandler sets the operation handler for the get account future baking operation
	AccountsGetAccountFutureBakingHandler accounts.GetAccountFutureBakingHandler
	// AccountsGetAccountFutureBakingRightsByCycleHandler sets the operation handler for the get account future baking rights by cycle operation
	AccountsGetAccountFutureBakingRightsByCycleHandler accounts.GetAccountFutureBakingRightsByCycleHandler
	// AccountsGetAccountFutureEndorsementRightsByCycleHandler sets the operation handler for the get account future endorsement rights by cycle operation
	AccountsGetAccountFutureEndorsementRightsByCycleHandler accounts.GetAccountFutureEndorsementRightsByCycleHandler
	// AccountsGetAccountFutureEndorsingHandler sets the operation handler for the get account future endorsing operation
	AccountsGetAccountFutureEndorsingHandler accounts.GetAccountFutureEndorsingHandler
	// AccountsGetAccountReportHandler sets the operation handler for the get account report operation
	AccountsGetAccountReportHandler accounts.GetAccountReportHandler
	// AccountsGetAccountRewardsListHandler sets the operation handler for the get account rewards list operation
	AccountsGetAccountRewardsListHandler accounts.GetAccountRewardsListHandler
	// AccountsGetAccountSecurityDepositListHandler sets the operation handler for the get account security deposit list operation
	AccountsGetAccountSecurityDepositListHandler accounts.GetAccountSecurityDepositListHandler
	// AccountsGetAccountTotalBakingHandler sets the operation handler for the get account total baking operation
	AccountsGetAccountTotalBakingHandler accounts.GetAccountTotalBakingHandler
	// AccountsGetAccountTotalEndorsingHandler sets the operation handler for the get account total endorsing operation
	AccountsGetAccountTotalEndorsingHandler accounts.GetAccountTotalEndorsingHandler
	// AccountsGetAccountsListHandler sets the operation handler for the get accounts list operation
	AccountsGetAccountsListHandler accounts.GetAccountsListHandler
	// AccountsGetAccountsTopBalanceListHandler sets the operation handler for the get accounts top balance list operation
	AccountsGetAccountsTopBalanceListHandler accounts.GetAccountsTopBalanceListHandler
	// AssetsGetAssetOperationsListHandler sets the operation handler for the get asset operations list operation
	AssetsGetAssetOperationsListHandler assets.GetAssetOperationsListHandler
	// AssetsGetAssetReportHandler sets the operation handler for the get asset report operation
	AssetsGetAssetReportHandler assets.GetAssetReportHandler
	// AssetsGetAssetTokenHoldersListHandler sets the operation handler for the get asset token holders list operation
	AssetsGetAssetTokenHoldersListHandler assets.GetAssetTokenHoldersListHandler
	// AssetsGetAssetTokenInfoHandler sets the operation handler for the get asset token info operation
	AssetsGetAssetTokenInfoHandler assets.GetAssetTokenInfoHandler
	// AssetsGetAssetsListHandler sets the operation handler for the get assets list operation
	AssetsGetAssetsListHandler assets.GetAssetsListHandler
	// FeesGetAvgFeesHandler sets the operation handler for the get avg fees operation
	FeesGetAvgFeesHandler fees.GetAvgFeesHandler
	// AppInfoGetBakerChartInfoHandler sets the operation handler for the get baker chart info operation
	AppInfoGetBakerChartInfoHandler app_info.GetBakerChartInfoHandler
	// AccountsGetBakersListHandler sets the operation handler for the get bakers list operation
	AccountsGetBakersListHandler accounts.GetBakersListHandler
	// BlocksGetBakingRightsHandler sets the operation handler for the get baking rights operation
	BlocksGetBakingRightsHandler blocks.GetBakingRightsHandler
	// VotingGetBallotsByPeriodIDHandler sets the operation handler for the get ballots by period ID operation
	VotingGetBallotsByPeriodIDHandler voting.GetBallotsByPeriodIDHandler
	// BlocksGetBlockHandler sets the operation handler for the get block operation
	BlocksGetBlockHandler blocks.GetBlockHandler
	// BlocksGetBlockBakingRightsHandler sets the operation handler for the get block baking rights operation
	BlocksGetBlockBakingRightsHandler blocks.GetBlockBakingRightsHandler
	// BlocksGetBlockEndorsementsHandler sets the operation handler for the get block endorsements operation
	BlocksGetBlockEndorsementsHandler blocks.GetBlockEndorsementsHandler
	// BlocksGetBlocksHeadHandler sets the operation handler for the get blocks head operation
	BlocksGetBlocksHeadHandler blocks.GetBlocksHeadHandler
	// BlocksGetBlocksListHandler sets the operation handler for the get blocks list operation
	BlocksGetBlocksListHandler blocks.GetBlocksListHandler
	// AppInfoGetBlocksPriorityChartInfoHandler sets the operation handler for the get blocks priority chart info operation
	AppInfoGetBlocksPriorityChartInfoHandler app_info.GetBlocksPriorityChartInfoHandler
	// AppInfoGetChartsInfoHandler sets the operation handler for the get charts info operation
	AppInfoGetChartsInfoHandler app_info.GetChartsInfoHandler
	// AccountsGetContractsListHandler sets the operation handler for the get contracts list operation
	AccountsGetContractsListHandler accounts.GetContractsListHandler
	// OperationsListGetDoubleBakingsListHandler sets the operation handler for the get double bakings list operation
	OperationsListGetDoubleBakingsListHandler operations_list.GetDoubleBakingsListHandler
	// OperationsListGetDoubleEndorsementsListHandler sets the operation handler for the get double endorsements list operation
	OperationsListGetDoubleEndorsementsListHandler operations_list.GetDoubleEndorsementsListHandler
	// BlocksGetFutureBakingRightsHandler sets the operation handler for the get future baking rights operation
	BlocksGetFutureBakingRightsHandler blocks.GetFutureBakingRightsHandler
	// AppInfoGetHealthCheckInfoHandler sets the operation handler for the get health check info operation
	AppInfoGetHealthCheckInfoHandler app_info.GetHealthCheckInfoHandler
	// AppInfoGetInfoHandler sets the operation handler for the get info operation
	AppInfoGetInfoHandler app_info.GetInfoHandler
	// MempoolGetMempoolOperationsHandler sets the operation handler for the get mempool operations operation
	MempoolGetMempoolOperationsHandler mempool.GetMempoolOperationsHandler
	// VotingGetNonVotersByPeriodIDHandler sets the operation handler for the get non voters by period ID operation
	VotingGetNonVotersByPeriodIDHandler voting.GetNonVotersByPeriodIDHandler
	// OperationGroupsGetOperationGroupHandler sets the operation handler for the get operation group operation
	OperationGroupsGetOperationGroupHandler operation_groups.GetOperationGroupHandler
	// OperationGroupsGetOperationGroupsHandler sets the operation handler for the get operation groups operation
	OperationGroupsGetOperationGroupsHandler operation_groups.GetOperationGroupsHandler
	// OperationsListGetOperationsListHandler sets the operation handler for the get operations list operation
	OperationsListGetOperationsListHandler operations_list.GetOperationsListHandler
	// VotingGetPeriodHandler sets the operation handler for the get period operation
	VotingGetPeriodHandler voting.GetPeriodHandler
	// VotingGetPeriodsListHandler sets the operation handler for the get periods list operation
	VotingGetPeriodsListHandler voting.GetPeriodsListHandler
	// VotingGetProposalVotesListHandler sets the operation handler for the get proposal votes list operation
	VotingGetProposalVotesListHandler voting.GetProposalVotesListHandler
	// VotingGetProposalsByPeriodIDHandler sets the operation handler for the get proposals by period ID operation
	VotingGetProposalsByPeriodIDHandler voting.GetProposalsByPeriodIDHandler
	// VotingGetProtocolsListHandler sets the operation handler for the get protocols list operation
	VotingGetProtocolsListHandler voting.GetProtocolsListHandler
	// AccountsGetPublicBakersListHandler sets the operation handler for the get public bakers list operation
	AccountsGetPublicBakersListHandler accounts.GetPublicBakersListHandler
	// AccountsGetPublicBakersListForSearchHandler sets the operation handler for the get public bakers list for search operation
	AccountsGetPublicBakersListForSearchHandler accounts.GetPublicBakersListForSearchHandler
	// GetSnapshotsHandler sets the operation handler for the get snapshots operation
	GetSnapshotsHandler GetSnapshotsHandler
	// AppInfoGetThirdPartyBakersHandlerHandler sets the operation handler for the get third party bakers handler operation
	AppInfoGetThirdPartyBakersHandlerHandler app_info.GetThirdPartyBakersHandlerHandler
	// ProfileGetUserAddressesHandler sets the operation handler for the get user addresses operation
	ProfileGetUserAddressesHandler profile.GetUserAddressesHandler
	// ProfileGetUserNotesHandler sets the operation handler for the get user notes operation
	ProfileGetUserNotesHandler profile.GetUserNotesHandler
	// ProfileGetUserProfileHandler sets the operation handler for the get user profile operation
	ProfileGetUserProfileHandler profile.GetUserProfileHandler
	// ProfileUpdateProfileHandler sets the operation handler for the update profile operation
	ProfileUpdateProfileHandler profile.UpdateProfileHandler
	// ProfileVerifyEmailHandler sets the operation handler for the verify email operation
	ProfileVerifyEmailHandler profile.VerifyEmailHandler
	// ProfileVerifyEmailTokenHandler sets the operation handler for the verify email token operation
	ProfileVerifyEmailTokenHandler profile.VerifyEmailTokenHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *TezTrackerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TezTrackerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TezTrackerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TezTrackerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TezTrackerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TezTrackerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TezTrackerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TezTrackerAPI
func (o *TezTrackerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CsvProducer == nil {
		unregistered = append(unregistered, "CsvProducer")
	}

	if o.WsConnectToWSHandler == nil {
		unregistered = append(unregistered, "w_s.ConnectToWSHandler")
	}

	if o.ProfileCreateOrUpdateNoteHandler == nil {
		unregistered = append(unregistered, "profile.CreateOrUpdateNoteHandler")
	}

	if o.ProfileCreateOrUpdateUserAddressHandler == nil {
		unregistered = append(unregistered, "profile.CreateOrUpdateUserAddressHandler")
	}

	if o.ProfileDeleteUserAddressHandler == nil {
		unregistered = append(unregistered, "profile.DeleteUserAddressHandler")
	}

	if o.ProfileDeleteUserNoteHandler == nil {
		unregistered = append(unregistered, "profile.DeleteUserNoteHandler")
	}

	if o.AccountsGetAccountHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountHandler")
	}

	if o.AccountsGetAccountAssetsBalancesListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountAssetsBalancesListHandler")
	}

	if o.AccountsGetAccountBakedBlocksListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountBakedBlocksListHandler")
	}

	if o.AccountsGetAccountBakingListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountBakingListHandler")
	}

	if o.AccountsGetAccountBalanceListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountBalanceListHandler")
	}

	if o.AccountsGetAccountDelegatorsHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountDelegatorsHandler")
	}

	if o.AccountsGetAccountDelegatorsByCycleListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountDelegatorsByCycleListHandler")
	}

	if o.AccountsGetAccountEndorsementsByCycleListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountEndorsementsByCycleListHandler")
	}

	if o.AccountsGetAccountEndorsingListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountEndorsingListHandler")
	}

	if o.AccountsGetAccountFutureBakingHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountFutureBakingHandler")
	}

	if o.AccountsGetAccountFutureBakingRightsByCycleHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountFutureBakingRightsByCycleHandler")
	}

	if o.AccountsGetAccountFutureEndorsementRightsByCycleHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountFutureEndorsementRightsByCycleHandler")
	}

	if o.AccountsGetAccountFutureEndorsingHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountFutureEndorsingHandler")
	}

	if o.AccountsGetAccountReportHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountReportHandler")
	}

	if o.AccountsGetAccountRewardsListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountRewardsListHandler")
	}

	if o.AccountsGetAccountSecurityDepositListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountSecurityDepositListHandler")
	}

	if o.AccountsGetAccountTotalBakingHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountTotalBakingHandler")
	}

	if o.AccountsGetAccountTotalEndorsingHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountTotalEndorsingHandler")
	}

	if o.AccountsGetAccountsListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountsListHandler")
	}

	if o.AccountsGetAccountsTopBalanceListHandler == nil {
		unregistered = append(unregistered, "accounts.GetAccountsTopBalanceListHandler")
	}

	if o.AssetsGetAssetOperationsListHandler == nil {
		unregistered = append(unregistered, "assets.GetAssetOperationsListHandler")
	}

	if o.AssetsGetAssetReportHandler == nil {
		unregistered = append(unregistered, "assets.GetAssetReportHandler")
	}

	if o.AssetsGetAssetTokenHoldersListHandler == nil {
		unregistered = append(unregistered, "assets.GetAssetTokenHoldersListHandler")
	}

	if o.AssetsGetAssetTokenInfoHandler == nil {
		unregistered = append(unregistered, "assets.GetAssetTokenInfoHandler")
	}

	if o.AssetsGetAssetsListHandler == nil {
		unregistered = append(unregistered, "assets.GetAssetsListHandler")
	}

	if o.FeesGetAvgFeesHandler == nil {
		unregistered = append(unregistered, "fees.GetAvgFeesHandler")
	}

	if o.AppInfoGetBakerChartInfoHandler == nil {
		unregistered = append(unregistered, "app_info.GetBakerChartInfoHandler")
	}

	if o.AccountsGetBakersListHandler == nil {
		unregistered = append(unregistered, "accounts.GetBakersListHandler")
	}

	if o.BlocksGetBakingRightsHandler == nil {
		unregistered = append(unregistered, "blocks.GetBakingRightsHandler")
	}

	if o.VotingGetBallotsByPeriodIDHandler == nil {
		unregistered = append(unregistered, "voting.GetBallotsByPeriodIDHandler")
	}

	if o.BlocksGetBlockHandler == nil {
		unregistered = append(unregistered, "blocks.GetBlockHandler")
	}

	if o.BlocksGetBlockBakingRightsHandler == nil {
		unregistered = append(unregistered, "blocks.GetBlockBakingRightsHandler")
	}

	if o.BlocksGetBlockEndorsementsHandler == nil {
		unregistered = append(unregistered, "blocks.GetBlockEndorsementsHandler")
	}

	if o.BlocksGetBlocksHeadHandler == nil {
		unregistered = append(unregistered, "blocks.GetBlocksHeadHandler")
	}

	if o.BlocksGetBlocksListHandler == nil {
		unregistered = append(unregistered, "blocks.GetBlocksListHandler")
	}

	if o.AppInfoGetBlocksPriorityChartInfoHandler == nil {
		unregistered = append(unregistered, "app_info.GetBlocksPriorityChartInfoHandler")
	}

	if o.AppInfoGetChartsInfoHandler == nil {
		unregistered = append(unregistered, "app_info.GetChartsInfoHandler")
	}

	if o.AccountsGetContractsListHandler == nil {
		unregistered = append(unregistered, "accounts.GetContractsListHandler")
	}

	if o.OperationsListGetDoubleBakingsListHandler == nil {
		unregistered = append(unregistered, "operations_list.GetDoubleBakingsListHandler")
	}

	if o.OperationsListGetDoubleEndorsementsListHandler == nil {
		unregistered = append(unregistered, "operations_list.GetDoubleEndorsementsListHandler")
	}

	if o.BlocksGetFutureBakingRightsHandler == nil {
		unregistered = append(unregistered, "blocks.GetFutureBakingRightsHandler")
	}

	if o.AppInfoGetHealthCheckInfoHandler == nil {
		unregistered = append(unregistered, "app_info.GetHealthCheckInfoHandler")
	}

	if o.AppInfoGetInfoHandler == nil {
		unregistered = append(unregistered, "app_info.GetInfoHandler")
	}

	if o.MempoolGetMempoolOperationsHandler == nil {
		unregistered = append(unregistered, "mempool.GetMempoolOperationsHandler")
	}

	if o.VotingGetNonVotersByPeriodIDHandler == nil {
		unregistered = append(unregistered, "voting.GetNonVotersByPeriodIDHandler")
	}

	if o.OperationGroupsGetOperationGroupHandler == nil {
		unregistered = append(unregistered, "operation_groups.GetOperationGroupHandler")
	}

	if o.OperationGroupsGetOperationGroupsHandler == nil {
		unregistered = append(unregistered, "operation_groups.GetOperationGroupsHandler")
	}

	if o.OperationsListGetOperationsListHandler == nil {
		unregistered = append(unregistered, "operations_list.GetOperationsListHandler")
	}

	if o.VotingGetPeriodHandler == nil {
		unregistered = append(unregistered, "voting.GetPeriodHandler")
	}

	if o.VotingGetPeriodsListHandler == nil {
		unregistered = append(unregistered, "voting.GetPeriodsListHandler")
	}

	if o.VotingGetProposalVotesListHandler == nil {
		unregistered = append(unregistered, "voting.GetProposalVotesListHandler")
	}

	if o.VotingGetProposalsByPeriodIDHandler == nil {
		unregistered = append(unregistered, "voting.GetProposalsByPeriodIDHandler")
	}

	if o.VotingGetProtocolsListHandler == nil {
		unregistered = append(unregistered, "voting.GetProtocolsListHandler")
	}

	if o.AccountsGetPublicBakersListHandler == nil {
		unregistered = append(unregistered, "accounts.GetPublicBakersListHandler")
	}

	if o.AccountsGetPublicBakersListForSearchHandler == nil {
		unregistered = append(unregistered, "accounts.GetPublicBakersListForSearchHandler")
	}

	if o.GetSnapshotsHandler == nil {
		unregistered = append(unregistered, "GetSnapshotsHandler")
	}

	if o.AppInfoGetThirdPartyBakersHandlerHandler == nil {
		unregistered = append(unregistered, "app_info.GetThirdPartyBakersHandlerHandler")
	}

	if o.ProfileGetUserAddressesHandler == nil {
		unregistered = append(unregistered, "profile.GetUserAddressesHandler")
	}

	if o.ProfileGetUserNotesHandler == nil {
		unregistered = append(unregistered, "profile.GetUserNotesHandler")
	}

	if o.ProfileGetUserProfileHandler == nil {
		unregistered = append(unregistered, "profile.GetUserProfileHandler")
	}

	if o.ProfileUpdateProfileHandler == nil {
		unregistered = append(unregistered, "profile.UpdateProfileHandler")
	}

	if o.ProfileVerifyEmailHandler == nil {
		unregistered = append(unregistered, "profile.VerifyEmailHandler")
	}

	if o.ProfileVerifyEmailTokenHandler == nil {
		unregistered = append(unregistered, "profile.VerifyEmailTokenHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TezTrackerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TezTrackerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *TezTrackerAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *TezTrackerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *TezTrackerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "text/csv":
			result["text/csv"] = o.CsvProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TezTrackerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tez tracker API
func (o *TezTrackerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TezTrackerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/{network}/ws"] = w_s.NewConnectToWS(o.context, o.WsConnectToWSHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/note"] = profile.NewCreateOrUpdateNote(o.context, o.ProfileCreateOrUpdateNoteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/address"] = profile.NewCreateOrUpdateUserAddress(o.context, o.ProfileCreateOrUpdateUserAddressHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/delete/address"] = profile.NewDeleteUserAddress(o.context, o.ProfileDeleteUserAddressHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/delete/note"] = profile.NewDeleteUserNote(o.context, o.ProfileDeleteUserNoteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/{accountId}"] = accounts.NewGetAccount(o.context, o.AccountsGetAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/{accountId}/assets"] = accounts.NewGetAccountAssetsBalancesList(o.context, o.AccountsGetAccountAssetsBalancesListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/baking/{accountId}/blocks/{cycleId}"] = accounts.NewGetAccountBakedBlocksList(o.context, o.AccountsGetAccountBakedBlocksListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/baking/{accountId}"] = accounts.NewGetAccountBakingList(o.context, o.AccountsGetAccountBakingListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/balances/{accountId}"] = accounts.NewGetAccountBalanceList(o.context, o.AccountsGetAccountBalanceListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/{accountId}/delegators"] = accounts.NewGetAccountDelegators(o.context, o.AccountsGetAccountDelegatorsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/{accountId}/delegators/{cycleId}"] = accounts.NewGetAccountDelegatorsByCycleList(o.context, o.AccountsGetAccountDelegatorsByCycleListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/endorsements/{cycleId}"] = accounts.NewGetAccountEndorsementsByCycleList(o.context, o.AccountsGetAccountEndorsementsByCycleListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/endorsing/{accountId}"] = accounts.NewGetAccountEndorsingList(o.context, o.AccountsGetAccountEndorsingListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/baking/{accountId}/future"] = accounts.NewGetAccountFutureBaking(o.context, o.AccountsGetAccountFutureBakingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/baking/{accountId}/future_baking_rights/{cycleId}"] = accounts.NewGetAccountFutureBakingRightsByCycle(o.context, o.AccountsGetAccountFutureBakingRightsByCycleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/future_endorsement_rights/{cycleId}"] = accounts.NewGetAccountFutureEndorsementRightsByCycle(o.context, o.AccountsGetAccountFutureEndorsementRightsByCycleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/future"] = accounts.NewGetAccountFutureEndorsing(o.context, o.AccountsGetAccountFutureEndorsingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/{accountId}/report"] = accounts.NewGetAccountReport(o.context, o.AccountsGetAccountReportHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/rewards/{accountId}"] = accounts.NewGetAccountRewardsList(o.context, o.AccountsGetAccountRewardsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/security_deposit/{accountId}/future"] = accounts.NewGetAccountSecurityDepositList(o.context, o.AccountsGetAccountSecurityDepositListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/baking/{accountId}/total"] = accounts.NewGetAccountTotalBaking(o.context, o.AccountsGetAccountTotalBakingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/total"] = accounts.NewGetAccountTotalEndorsing(o.context, o.AccountsGetAccountTotalEndorsingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts"] = accounts.NewGetAccountsList(o.context, o.AccountsGetAccountsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/accounts/top_balance"] = accounts.NewGetAccountsTopBalanceList(o.context, o.AccountsGetAccountsTopBalanceListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/assets/operations"] = assets.NewGetAssetOperationsList(o.context, o.AssetsGetAssetOperationsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/assets/{assetId}/report"] = assets.NewGetAssetReport(o.context, o.AssetsGetAssetReportHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/assets/{asset_id}/holders"] = assets.NewGetAssetTokenHoldersList(o.context, o.AssetsGetAssetTokenHoldersListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/assets/{asset_id}"] = assets.NewGetAssetTokenInfo(o.context, o.AssetsGetAssetTokenInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/assets"] = assets.NewGetAssetsList(o.context, o.AssetsGetAssetsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/operations/avgFees"] = fees.NewGetAvgFees(o.context, o.FeesGetAvgFeesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/charts/bakers"] = app_info.NewGetBakerChartInfo(o.context, o.AppInfoGetBakerChartInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/bakers"] = accounts.NewGetBakersList(o.context, o.AccountsGetBakersListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/baking_rights"] = blocks.NewGetBakingRights(o.context, o.BlocksGetBakingRightsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/ballots/{id}"] = voting.NewGetBallotsByPeriodID(o.context, o.VotingGetBallotsByPeriodIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/blocks/{hash}"] = blocks.NewGetBlock(o.context, o.BlocksGetBlockHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/blocks/{hash}/baking_rights"] = blocks.NewGetBlockBakingRights(o.context, o.BlocksGetBlockBakingRightsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/blocks/{hash}/endorsements"] = blocks.NewGetBlockEndorsements(o.context, o.BlocksGetBlockEndorsementsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/blocks/head"] = blocks.NewGetBlocksHead(o.context, o.BlocksGetBlocksHeadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/blocks"] = blocks.NewGetBlocksList(o.context, o.BlocksGetBlocksListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/charts/blocks_priority"] = app_info.NewGetBlocksPriorityChartInfo(o.context, o.AppInfoGetBlocksPriorityChartInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/charts"] = app_info.NewGetChartsInfo(o.context, o.AppInfoGetChartsInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/contracts"] = accounts.NewGetContractsList(o.context, o.AccountsGetContractsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/double_bakings"] = operations_list.NewGetDoubleBakingsList(o.context, o.OperationsListGetDoubleBakingsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/double_endorsements"] = operations_list.NewGetDoubleEndorsementsList(o.context, o.OperationsListGetDoubleEndorsementsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/future_baking_rights"] = blocks.NewGetFutureBakingRights(o.context, o.BlocksGetFutureBakingRightsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/health"] = app_info.NewGetHealthCheckInfo(o.context, o.AppInfoGetHealthCheckInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/info"] = app_info.NewGetInfo(o.context, o.AppInfoGetInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/mempool"] = mempool.NewGetMempoolOperations(o.context, o.MempoolGetMempoolOperationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/non_voters/{id}"] = voting.NewGetNonVotersByPeriodID(o.context, o.VotingGetNonVotersByPeriodIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/operation_groups/{operationGroupId}"] = operation_groups.NewGetOperationGroup(o.context, o.OperationGroupsGetOperationGroupHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/operation_groups"] = operation_groups.NewGetOperationGroups(o.context, o.OperationGroupsGetOperationGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/operations"] = operations_list.NewGetOperationsList(o.context, o.OperationsListGetOperationsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/period"] = voting.NewGetPeriod(o.context, o.VotingGetPeriodHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/periods"] = voting.NewGetPeriodsList(o.context, o.VotingGetPeriodsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/proposal_votes/{id}"] = voting.NewGetProposalVotesList(o.context, o.VotingGetProposalVotesListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/proposals"] = voting.NewGetProposalsByPeriodID(o.context, o.VotingGetProposalsByPeriodIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{network}/protocols"] = voting.NewGetProtocolsList(o.context, o.VotingGetProtocolsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/public_bakers"] = accounts.NewGetPublicBakersList(o.context, o.AccountsGetPublicBakersListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/public_bakers/search"] = accounts.NewGetPublicBakersListForSearch(o.context, o.AccountsGetPublicBakersListForSearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/{platform}/{network}/snapshots"] = NewGetSnapshots(o.context, o.GetSnapshotsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/thirdparty/bakers"] = app_info.NewGetThirdPartyBakersHandler(o.context, o.AppInfoGetThirdPartyBakersHandlerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/profile/addresses"] = profile.NewGetUserAddresses(o.context, o.ProfileGetUserAddressesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/profile/notes"] = profile.NewGetUserNotes(o.context, o.ProfileGetUserNotesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data/profile"] = profile.NewGetUserProfile(o.context, o.ProfileGetUserProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/update"] = profile.NewUpdateProfile(o.context, o.ProfileUpdateProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/verify/email"] = profile.NewVerifyEmail(o.context, o.ProfileVerifyEmailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data/profile/verify/email/token"] = profile.NewVerifyEmailToken(o.context, o.ProfileVerifyEmailTokenHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TezTrackerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TezTrackerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TezTrackerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TezTrackerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
