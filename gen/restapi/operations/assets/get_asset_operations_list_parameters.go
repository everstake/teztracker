// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAssetOperationsListParams creates a new GetAssetOperationsListParams object
// with the default values initialized.
func NewGetAssetOperationsListParams() GetAssetOperationsListParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(20)

		offsetDefault = int64(0)
	)

	return GetAssetOperationsListParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,
	}
}

// GetAssetOperationsListParams contains all the bound params for the get asset operations list operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAssetOperationsList
type GetAssetOperationsListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	AccountID []string
	/*
	  In: query
	*/
	AssetID []string
	/*
	  In: query
	  Collection Format: multi
	*/
	BlockLevel []int64
	/*
	  Maximum: 300
	  Minimum: 1
	  In: query
	  Default: 20
	*/
	Limit *int64
	/*
	  Required: true
	  In: path
	*/
	Network string
	/*
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*
	  In: query
	*/
	Type []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAssetOperationsListParams() beforehand.
func (o *GetAssetOperationsListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAccountID, qhkAccountID, _ := qs.GetOK("account_id")
	if err := o.bindAccountID(qAccountID, qhkAccountID, route.Formats); err != nil {
		res = append(res, err)
	}

	qAssetID, qhkAssetID, _ := qs.GetOK("asset_id")
	if err := o.bindAssetID(qAssetID, qhkAssetID, route.Formats); err != nil {
		res = append(res, err)
	}

	qBlockLevel, qhkBlockLevel, _ := qs.GetOK("block_level")
	if err := o.bindBlockLevel(qBlockLevel, qhkBlockLevel, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	rNetwork, rhkNetwork, _ := route.Params.GetOK("network")
	if err := o.bindNetwork(rNetwork, rhkNetwork, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAccountID binds and validates array parameter AccountID from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetAssetOperationsListParams) bindAccountID(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvAccountID string
	if len(rawData) > 0 {
		qvAccountID = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	accountIDIC := swag.SplitByFormat(qvAccountID, "")
	if len(accountIDIC) == 0 {
		return nil
	}

	var accountIDIR []string
	for _, accountIDIV := range accountIDIC {
		accountIDI := accountIDIV

		accountIDIR = append(accountIDIR, accountIDI)
	}

	o.AccountID = accountIDIR

	return nil
}

// bindAssetID binds and validates array parameter AssetID from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetAssetOperationsListParams) bindAssetID(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvAssetID string
	if len(rawData) > 0 {
		qvAssetID = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	assetIDIC := swag.SplitByFormat(qvAssetID, "")
	if len(assetIDIC) == 0 {
		return nil
	}

	var assetIDIR []string
	for _, assetIDIV := range assetIDIC {
		assetIDI := assetIDIV

		assetIDIR = append(assetIDIR, assetIDI)
	}

	o.AssetID = assetIDIR

	return nil
}

// bindBlockLevel binds and validates array parameter BlockLevel from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *GetAssetOperationsListParams) bindBlockLevel(rawData []string, hasKey bool, formats strfmt.Registry) error {

	// CollectionFormat: multi
	blockLevelIC := rawData

	if len(blockLevelIC) == 0 {
		return nil
	}

	var blockLevelIR []int64
	for i, blockLevelIV := range blockLevelIC {
		blockLevelI, err := swag.ConvertInt64(blockLevelIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "block_level", i), "query", "int64", blockLevelI)
		}

		blockLevelIR = append(blockLevelIR, blockLevelI)
	}

	o.BlockLevel = blockLevelIR

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetAssetOperationsListParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAssetOperationsListParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetAssetOperationsListParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", int64(*o.Limit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", int64(*o.Limit), 300, false); err != nil {
		return err
	}

	return nil
}

// bindNetwork binds and validates parameter Network from path.
func (o *GetAssetOperationsListParams) bindNetwork(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Network = raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetAssetOperationsListParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAssetOperationsListParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetAssetOperationsListParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", int64(*o.Offset), 0, false); err != nil {
		return err
	}

	return nil
}

// bindType binds and validates array parameter Type from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetAssetOperationsListParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvType string
	if len(rawData) > 0 {
		qvType = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	typeIC := swag.SplitByFormat(qvType, "")
	if len(typeIC) == 0 {
		return nil
	}

	var typeIR []string
	for _, typeIV := range typeIC {
		typeI := typeIV

		typeIR = append(typeIR, typeI)
	}

	o.Type = typeIR

	return nil
}
