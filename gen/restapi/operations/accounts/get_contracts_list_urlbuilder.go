// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/swag"
)

// GetContractsListURL generates an URL for the get contracts list operation
type GetContractsListURL struct {
	Network  string
	Platform string

	AccountDelegate []string
	AccountID       []string
	AccountManager  []string
	AfterID         *string
	Favorites       []string
	Limit           *int64
	Offset          *int64
	Order           *string
	SortBy          *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetContractsListURL) WithBasePath(bp string) *GetContractsListURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetContractsListURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetContractsListURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/v2/data/{platform}/{network}/contracts"

	network := o.Network
	if network != "" {
		_path = strings.Replace(_path, "{network}", network, -1)
	} else {
		return nil, errors.New("network is required on GetContractsListURL")
	}

	platform := o.Platform
	if platform != "" {
		_path = strings.Replace(_path, "{platform}", platform, -1)
	} else {
		return nil, errors.New("platform is required on GetContractsListURL")
	}

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var accountDelegateIR []string
	for _, accountDelegateI := range o.AccountDelegate {
		accountDelegateIS := accountDelegateI
		if accountDelegateIS != "" {
			accountDelegateIR = append(accountDelegateIR, accountDelegateIS)
		}
	}

	accountDelegate := swag.JoinByFormat(accountDelegateIR, "multi")

	for _, qsv := range accountDelegate {
		qs.Add("account_delegate", qsv)
	}

	var accountIDIR []string
	for _, accountIDI := range o.AccountID {
		accountIDIS := accountIDI
		if accountIDIS != "" {
			accountIDIR = append(accountIDIR, accountIDIS)
		}
	}

	accountID := swag.JoinByFormat(accountIDIR, "multi")

	for _, qsv := range accountID {
		qs.Add("account_id", qsv)
	}

	var accountManagerIR []string
	for _, accountManagerI := range o.AccountManager {
		accountManagerIS := accountManagerI
		if accountManagerIS != "" {
			accountManagerIR = append(accountManagerIR, accountManagerIS)
		}
	}

	accountManager := swag.JoinByFormat(accountManagerIR, "multi")

	for _, qsv := range accountManager {
		qs.Add("account_manager", qsv)
	}

	var afterIDQ string
	if o.AfterID != nil {
		afterIDQ = *o.AfterID
	}
	if afterIDQ != "" {
		qs.Set("after_id", afterIDQ)
	}

	var favoritesIR []string
	for _, favoritesI := range o.Favorites {
		favoritesIS := favoritesI
		if favoritesIS != "" {
			favoritesIR = append(favoritesIR, favoritesIS)
		}
	}

	favorites := swag.JoinByFormat(favoritesIR, "multi")

	for _, qsv := range favorites {
		qs.Add("favorites", qsv)
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt64(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = swag.FormatInt64(*o.Offset)
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var orderQ string
	if o.Order != nil {
		orderQ = *o.Order
	}
	if orderQ != "" {
		qs.Set("order", orderQ)
	}

	var sortByQ string
	if o.SortBy != nil {
		sortByQ = *o.SortBy
	}
	if sortByQ != "" {
		qs.Set("sort_by", sortByQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetContractsListURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetContractsListURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetContractsListURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetContractsListURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetContractsListURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetContractsListURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
