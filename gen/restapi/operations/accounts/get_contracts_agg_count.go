// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetContractsAggCountHandlerFunc turns a function with the right signature into a get contracts agg count handler
type GetContractsAggCountHandlerFunc func(GetContractsAggCountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetContractsAggCountHandlerFunc) Handle(params GetContractsAggCountParams) middleware.Responder {
	return fn(params)
}

// GetContractsAggCountHandler interface for that can handle valid get contracts agg count params
type GetContractsAggCountHandler interface {
	Handle(GetContractsAggCountParams) middleware.Responder
}

// NewGetContractsAggCount creates a new http.Handler for the get contracts agg count operation
func NewGetContractsAggCount(ctx *middleware.Context, handler GetContractsAggCountHandler) *GetContractsAggCount {
	return &GetContractsAggCount{Context: ctx, Handler: handler}
}

/*GetContractsAggCount swagger:route GET /v2/data/{platform}/{network}/contracts/agg Accounts getContractsAggCount

GetContractsAggCount get contracts agg count API

*/
type GetContractsAggCount struct {
	Context *middleware.Context
	Handler GetContractsAggCountHandler
}

func (o *GetContractsAggCount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetContractsAggCountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
