// Code generated by go-swagger; DO NOT EDIT.

package n_f_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetNFTContractTokensHandlerFunc turns a function with the right signature into a get n f t contract tokens handler
type GetNFTContractTokensHandlerFunc func(GetNFTContractTokensParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNFTContractTokensHandlerFunc) Handle(params GetNFTContractTokensParams) middleware.Responder {
	return fn(params)
}

// GetNFTContractTokensHandler interface for that can handle valid get n f t contract tokens params
type GetNFTContractTokensHandler interface {
	Handle(GetNFTContractTokensParams) middleware.Responder
}

// NewGetNFTContractTokens creates a new http.Handler for the get n f t contract tokens operation
func NewGetNFTContractTokens(ctx *middleware.Context, handler GetNFTContractTokensHandler) *GetNFTContractTokens {
	return &GetNFTContractTokens{Context: ctx, Handler: handler}
}

/*GetNFTContractTokens swagger:route GET /v2/data/{network}/nft_contracts/{contract_id}/tokens NFT getNFTContractTokens

GetNFTContractTokens get n f t contract tokens API

*/
type GetNFTContractTokens struct {
	Context *middleware.Context
	Handler GetNFTContractTokensHandler
}

func (o *GetNFTContractTokens) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNFTContractTokensParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
