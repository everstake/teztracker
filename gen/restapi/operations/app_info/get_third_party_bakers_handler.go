// Code generated by go-swagger; DO NOT EDIT.

package app_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetThirdPartyBakersHandlerHandlerFunc turns a function with the right signature into a get third party bakers handler handler
type GetThirdPartyBakersHandlerHandlerFunc func(GetThirdPartyBakersHandlerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetThirdPartyBakersHandlerHandlerFunc) Handle(params GetThirdPartyBakersHandlerParams) middleware.Responder {
	return fn(params)
}

// GetThirdPartyBakersHandlerHandler interface for that can handle valid get third party bakers handler params
type GetThirdPartyBakersHandlerHandler interface {
	Handle(GetThirdPartyBakersHandlerParams) middleware.Responder
}

// NewGetThirdPartyBakersHandler creates a new http.Handler for the get third party bakers handler operation
func NewGetThirdPartyBakersHandler(ctx *middleware.Context, handler GetThirdPartyBakersHandlerHandler) *GetThirdPartyBakersHandler {
	return &GetThirdPartyBakersHandler{Context: ctx, Handler: handler}
}

/*GetThirdPartyBakersHandler swagger:route GET /v2/data/thirdparty/bakers App Info getThirdPartyBakersHandler

GetThirdPartyBakersHandler get third party bakers handler API

*/
type GetThirdPartyBakersHandler struct {
	Context *middleware.Context
	Handler GetThirdPartyBakersHandlerHandler
}

func (o *GetThirdPartyBakersHandler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetThirdPartyBakersHandlerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
