// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "TezTracker API",
    "version": "0.0.1"
  },
  "paths": {
    "/v2/data/profile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "getUserProfile",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user profile",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/address": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "createOrUpdateUserAddress",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create or update user address"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/addresses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "getUserAddresses",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user addresses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAddressWithBalance"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/delete/address": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "deleteUserAddress",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteUserAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user address"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/delete/note": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "deleteUserNote",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteUserNote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user note"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/note": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "createOrUpdateNote",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserNote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user note"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/notes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "getUserNotes",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user notes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserNoteWithBalance"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/update": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "updateProfile",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RequestUserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user profile"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/verify/email": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "verifyEmail",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Verified user email"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/verify/email/token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "verifyEmailToken",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verified user email token"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/thirdparty/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getThirdPartyBakersHandler",
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThirdPartyBakers"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{network}/assets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetsList",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for tokens list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenAssetRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/assets/{asset_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetTokenInfo",
        "parameters": [
          {
            "type": "string",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for token holders",
            "schema": {
              "$ref": "#/definitions/TokenAssetRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/assets/{asset_id}/holders": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetTokenHoldersList",
        "parameters": [
          {
            "type": "string",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for token holders",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenHolderRow"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/assets/{asset_id}/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetOperationsList",
        "parameters": [
          {
            "type": "string",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for token operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetOperation"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/ballots/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getBallotsByPeriodID",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for ballots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BallotVoter"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/non_voters/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getNonVotersByPeriodID",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for ballots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonVoter"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/period": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getPeriod",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for periods",
            "schema": {
              "$ref": "#/definitions/PeriodInfo"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/periods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getPeriodsList",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for periods",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Period"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/proposal_votes/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getProposalVotesList",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for proposal votes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProposalVoter"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/proposals": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getProposalsByPeriodID",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "period_id",
            "in": "query"
          },
          {
            "maximum": 20,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for proposals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Proposal"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/protocols": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getProtocolsList",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for protocols",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountBakingList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBakingRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/blocks/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountBakedBlocksList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlocksRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/future": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureBaking",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBakingRow"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/future_baking_rights/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureBakingRightsByCycle",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakingRightsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/total": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountTotalBaking",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "$ref": "#/definitions/AccountBakingRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/balances/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountBalanceList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account balances",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBalance"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountEndorsingList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountEndorsingRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/endorsements/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountEndorsementsByCycleList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/future": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureEndorsing",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountEndorsingRow"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/future_endorsement_rights/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureEndorsementRightsByCycle",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndorsementRightsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/total": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountTotalEndorsing",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "$ref": "#/definitions/AccountEndorsingRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/rewards/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountRewardsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account rewards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountRewardsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/security_deposit/{accountId}/future": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountSecurityDepositList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account rewards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSecurityDepositRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/top_balance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountsTopBalanceList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account",
            "schema": {
              "$ref": "#/definitions/AccountsRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/delegators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountDelegators",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for account delegators",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/delegators/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountDelegatorsByCycleList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account rewards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakerDelegator"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/report": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountReport",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "to",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file to download",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/assets/{assetId}/report": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetReport",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "assetId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "to",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file to download",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getBakersList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts ordered by staking balance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakersRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/baking_rights": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBakingRights",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 64,
            "type": "integer",
            "default": 10,
            "name": "priorities_to",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for baking rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakingRightsPerBlock"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlocksRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/head": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksHead",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks head",
            "schema": {
              "$ref": "#/definitions/BlocksRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Not initialized"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlock",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for block by hash",
            "schema": {
              "$ref": "#/definitions/BlockResult"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}/baking_rights": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlockBakingRights",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for baking rights of a block by hash or level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakingRightsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}/endorsements": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlockEndorsements",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for endorsements of a block by hash or level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/charts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getChartsInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "to",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "D"
            ],
            "type": "string",
            "name": "period",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "columns",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChartsData"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/charts/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getBakerChartInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 20,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakerChartData"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/charts/blocks_priority": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getBlocksPriorityChartInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockPriorityChartData"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/contracts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getContractsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for contract accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/double_bakings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getDoubleBakingsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/double_endorsements": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getDoubleEndorsementsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/future_baking_rights": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getFutureBakingRights",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 64,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "name": "priorities_to",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for future baking rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FutureBakingRightsPerBlock"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getHealthCheckInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application health info endpoint",
            "schema": {
              "$ref": "#/definitions/Health"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "usd",
              "eur",
              "gbp",
              "cny"
            ],
            "type": "string",
            "default": "usd",
            "name": "currency",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "$ref": "#/definitions/Info"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/mempool": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mempool"
        ],
        "operationId": "getMempoolOperations",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for mempool operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MempoolOperation"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroups",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups/{operationGroupId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroup",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "operationGroupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation group",
            "schema": {
              "$ref": "#/definitions/OperationGroupResult"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getOperationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations/avgFees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Fees"
        ],
        "operationId": "getAvgFees",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for average fees",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/public_bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getPublicBakersList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts ordered by staking balance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicBaker"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/public_bakers/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getPublicBakersListForSearch",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts with name for search.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicBakerSearch"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/snapshots": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "getSnapshots",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for snapshots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Snapshots"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/{network}/ws": {
      "get": {
        "schemes": [
          "ws"
        ],
        "tags": [
          "WS"
        ],
        "operationId": "connectToWS",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {},
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "AccountBakingRow": {
      "required": [
        "avgPriority",
        "missed",
        "stolen",
        "cycle",
        "rewards",
        "blocks",
        "totalDeposit"
      ],
      "properties": {
        "avgPriority": {
          "type": "number",
          "format": "float"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "missed": {
          "type": "integer",
          "format": "int64"
        },
        "rewards": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "stolen": {
          "type": "integer",
          "format": "int64"
        },
        "totalDeposit": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountBalance": {
      "required": [
        "timestamp",
        "balance"
      ],
      "properties": {
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountEndorsingRow": {
      "required": [
        "cycle",
        "missed",
        "rewards",
        "slots",
        "totalDeposit"
      ],
      "properties": {
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "missed": {
          "type": "integer",
          "format": "int64"
        },
        "rewards": {
          "type": "integer",
          "format": "int64"
        },
        "slots": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "totalDeposit": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountResult": {
      "type": "object",
      "required": [
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountsRow"
        }
      }
    },
    "AccountRewardsRow": {
      "required": [
        "cycle",
        "delegators",
        "stakingBalance",
        "endorsements",
        "baking",
        "losses",
        "fees"
      ],
      "properties": {
        "baking": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "delegators": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "losses": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "AccountSecurityDepositRow": {
      "properties": {
        "actual_blocks_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "actual_endorsement_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "actual_total_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "available_bond": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "expected_blocks_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "expected_endorsement_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "expected_total_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "staking_balance": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "AccountsRow": {
      "type": "object",
      "required": [
        "balance",
        "accountId",
        "delegateSetable",
        "spendable",
        "manager",
        "counter",
        "blockLevel",
        "blockId",
        "revealed",
        "is_baker"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "bakerInfo": {
          "$ref": "#/definitions/BakerInfo"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "blockId": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "delegateName": {
          "type": "string"
        },
        "delegateSetable": {
          "type": "boolean"
        },
        "delegateValue": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "is_baker": {
          "type": "boolean"
        },
        "lastActive": {
          "type": "integer",
          "format": "int64"
        },
        "manager": {
          "type": "string"
        },
        "operations": {
          "type": "integer",
          "format": "int64"
        },
        "revealed": {
          "type": "boolean"
        },
        "script": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "storage": {
          "type": "string"
        },
        "transactions": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AssetOperation": {
      "required": [
        "amount",
        "fee",
        "gas_limit",
        "storage_limit"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "from": {
          "type": "string"
        },
        "gas_limit": {
          "type": "integer",
          "format": "int64"
        },
        "operation_group_hash": {
          "type": "string"
        },
        "storage_limit": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "to": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "BakerChartData": {
      "properties": {
        "baker": {
          "type": "string"
        },
        "baker_name": {
          "type": "string"
        },
        "percent": {
          "type": "number",
          "format": "float64"
        },
        "rolls": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BakerDelegator": {
      "required": [
        "delegator",
        "balance",
        "share",
        "cycle"
      ],
      "properties": {
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "delegator": {
          "type": "string"
        },
        "share": {
          "type": "number"
        }
      }
    },
    "BakerInfo": {
      "type": "object",
      "required": [
        "stakingBalance",
        "evaluatedBalance",
        "frozenBalance",
        "endorsementDeposits",
        "bakingDeposits",
        "endorsementRewards",
        "bakingRewards",
        "activeDelegators",
        "blocks",
        "endorsements",
        "rolls",
        "bakingSince",
        "fee",
        "stakingCapacity"
      ],
      "properties": {
        "activeDelegators": {
          "type": "integer",
          "format": "int64"
        },
        "bakingDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "bakingRewards": {
          "type": "integer",
          "format": "int64"
        },
        "bakingSince": {
          "type": "integer",
          "format": "int64"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementRewards": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "evaluatedBalance": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "frozenBalance": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "rolls": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        },
        "stakingCapacity": {
          "type": "integer",
          "format": "int64"
        },
        "totalPaidFees": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BakersRow": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "bakerInfo": {
          "$ref": "#/definitions/BakerInfo"
        }
      }
    },
    "BakingRightsPerBlock": {
      "required": [
        "baker_priority"
      ],
      "properties": {
        "baker": {
          "type": "string"
        },
        "baker_priority": {
          "type": "integer"
        },
        "block_hash": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BakingRightsRow"
          }
        }
      }
    },
    "BakingRightsRow": {
      "required": [
        "priority"
      ],
      "properties": {
        "delegate": {
          "type": "string"
        },
        "delegate_name": {
          "type": "string"
        },
        "deposit": {
          "type": "integer",
          "format": "int64"
        },
        "estimated_time": {
          "type": "string",
          "format": "date-time"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BallotVoter": {
      "properties": {
        "blockLevel": {
          "type": "integer"
        },
        "decision": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "rolls": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Ballots": {
      "properties": {
        "nay": {
          "type": "integer"
        },
        "pass": {
          "type": "integer"
        },
        "quorum": {
          "type": "number"
        },
        "supermajority": {
          "type": "number"
        },
        "yay": {
          "type": "integer"
        }
      }
    },
    "BlockPriorityChartData": {
      "required": [
        "cycle",
        "blocks",
        "zeroPriority",
        "firstPriority",
        "secondPriority",
        "thirdPriority"
      ],
      "properties": {
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "firstPriority": {
          "type": "integer",
          "format": "int64"
        },
        "secondPriority": {
          "type": "integer",
          "format": "int64"
        },
        "thirdPriority": {
          "type": "integer",
          "format": "int64"
        },
        "zeroPriority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BlockResult": {
      "type": "object",
      "required": [
        "block",
        "operation_groups"
      ],
      "properties": {
        "block": {
          "$ref": "#/definitions/BlocksRow"
        },
        "operation_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationGroupsRow"
          }
        }
      }
    },
    "BlocksRow": {
      "type": "object",
      "required": [
        "timestamp",
        "validationPass",
        "hash",
        "fitness",
        "proto",
        "protocol",
        "priority",
        "predecessor",
        "level",
        "reward"
      ],
      "properties": {
        "activate_accounts": {
          "type": "integer",
          "format": "int64"
        },
        "activeProposal": {
          "type": "string"
        },
        "baker": {
          "type": "string"
        },
        "bakerName": {
          "type": "string"
        },
        "ballots": {
          "type": "integer",
          "format": "int64"
        },
        "blockTime": {
          "type": "integer",
          "format": "int64"
        },
        "chainId": {
          "type": "string"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "context": {
          "type": "string"
        },
        "currentExpectedQuorum": {
          "type": "integer",
          "format": "int64"
        },
        "delegations": {
          "type": "integer",
          "format": "int64"
        },
        "deposit": {
          "type": "integer",
          "format": "int64"
        },
        "double_baking_evidence": {
          "type": "integer",
          "format": "int64"
        },
        "double_endorsement_evidence": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "expectedCommitment": {
          "type": "boolean"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "fitness": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "metaCycle": {
          "type": "integer",
          "format": "int64"
        },
        "metaCyclePosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevel": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevelPosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriodPosition": {
          "type": "integer",
          "format": "int64"
        },
        "nonceHash": {
          "type": "string"
        },
        "number_of_operations": {
          "type": "integer",
          "format": "int64"
        },
        "operationsHash": {
          "type": "string"
        },
        "originations": {
          "type": "integer",
          "format": "int64"
        },
        "periodKind": {
          "type": "string"
        },
        "predecessor": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "proposals": {
          "type": "integer",
          "format": "int64"
        },
        "proto": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        },
        "reveals": {
          "type": "integer",
          "format": "int64"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        },
        "seed_nonce_revelations": {
          "type": "integer",
          "format": "int64"
        },
        "signature": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "transactions": {
          "type": "integer",
          "format": "int64"
        },
        "validationPass": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ChartsData": {
      "required": [
        "timestamp"
      ],
      "properties": {
        "activations": {
          "type": "integer",
          "format": "int64"
        },
        "averageDelay": {
          "type": "number",
          "format": "float64"
        },
        "bakers": {
          "type": "integer",
          "format": "int64"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "delegationVolume": {
          "type": "integer",
          "format": "int64"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "operations": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "transactionVolume": {
          "type": "integer",
          "format": "int64"
        },
        "whale_accounts": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DeleteUserAddress": {
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "DeleteUserNote": {
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "DoubleOperationDetails": {
      "properties": {
        "baker_reward": {
          "type": "integer",
          "format": "int64"
        },
        "denounced_level": {
          "type": "integer",
          "format": "int64"
        },
        "evidence_baker": {
          "type": "string"
        },
        "evidence_baker_name": {
          "type": "string"
        },
        "lost_deposits": {
          "type": "integer",
          "format": "int64"
        },
        "lost_fees": {
          "type": "integer",
          "format": "int64"
        },
        "lost_rewards": {
          "type": "integer",
          "format": "int64"
        },
        "offender": {
          "type": "string"
        },
        "offender_name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EmailToken": {
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "EndorsementRightsRow": {
      "properties": {
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "delegate": {
          "type": "string"
        },
        "delegate_name": {
          "type": "string"
        },
        "deposit": {
          "type": "integer",
          "format": "int64"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FutureBakingRightsPerBlock": {
      "properties": {
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BakingRightsRow"
          }
        }
      }
    },
    "Health": {
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "Info": {
      "type": "object",
      "required": [
        "price",
        "price_24h_change"
      ],
      "properties": {
        "annual_yield": {
          "description": "Expected annual return in percents.",
          "type": "number"
        },
        "blocks_in_cycle": {
          "type": "integer"
        },
        "circulating_supply": {
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "market_cap": {
          "type": "number"
        },
        "price": {
          "type": "number"
        },
        "price_24h_change": {
          "type": "number"
        },
        "staking_ratio": {
          "description": "Staking ratio in percents (0-100).",
          "type": "number",
          "maximum": 100
        },
        "volume_24h": {
          "type": "number"
        }
      }
    },
    "MempoolOperation": {
      "properties": {
        "branch": {
          "type": "string"
        },
        "chain_id": {
          "type": "string"
        },
        "contents": {
          "type": "object"
        },
        "hash": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "NonVoter": {
      "properties": {
        "name": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "rolls": {
          "type": "integer"
        }
      }
    },
    "OperationGroupResult": {
      "type": "object",
      "required": [
        "operation_group",
        "operations"
      ],
      "properties": {
        "operation_group": {
          "$ref": "#/definitions/OperationGroupsRow"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationsRow"
          }
        }
      }
    },
    "OperationGroupsRow": {
      "type": "object",
      "required": [
        "protocol",
        "hash",
        "branch",
        "blockId"
      ],
      "properties": {
        "blockId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "chainId": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "OperationsRow": {
      "type": "object",
      "required": [
        "blockHash",
        "timestamp",
        "operationId",
        "operationGroupHash",
        "kind",
        "blockLevel",
        "confirmations"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "ballot": {
          "type": "string"
        },
        "blockHash": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "claimedAmount": {
          "type": "integer",
          "format": "int64"
        },
        "confirmations": {
          "type": "integer",
          "format": "int64"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "delegatable": {
          "type": "boolean"
        },
        "delegate": {
          "type": "string"
        },
        "delegateName": {
          "type": "string"
        },
        "delegationAmount": {
          "type": "integer",
          "format": "int64"
        },
        "destination": {
          "type": "string"
        },
        "destinationName": {
          "type": "string"
        },
        "doubleOperationDetails": {
          "$ref": "#/definitions/DoubleOperationDetails"
        },
        "endorsementDeposit": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementReward": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "gasLimit": {
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "managerPubkey": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "operationGroupHash": {
          "type": "string"
        },
        "operationId": {
          "type": "integer",
          "format": "int64"
        },
        "originatedContracts": {
          "type": "string"
        },
        "paidStorageSizeDiff": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "proposal": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        },
        "script": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "slots": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "storage": {
          "type": "string"
        },
        "storageLimit": {
          "type": "integer",
          "format": "int64"
        },
        "storageSize": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Period": {
      "required": [
        "id"
      ],
      "properties": {
        "curLevel": {
          "type": "integer"
        },
        "endLevel": {
          "type": "integer"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        },
        "periodType": {
          "type": "string"
        },
        "startLevel": {
          "type": "integer"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PeriodInfo": {
      "properties": {
        "ballots": {
          "$ref": "#/definitions/Ballots"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "proposal": {
          "$ref": "#/definitions/Proposal"
        },
        "totalPeriods": {
          "type": "integer"
        },
        "voteStats": {
          "$ref": "#/definitions/VoteStats"
        },
        "winner": {
          "$ref": "#/definitions/Proposal"
        }
      }
    },
    "Proposal": {
      "properties": {
        "hash": {
          "type": "string"
        },
        "minQuorum": {
          "type": "integer"
        },
        "period": {
          "type": "integer"
        },
        "proposalFile": {
          "type": "string"
        },
        "proposer": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "pkh": {
              "type": "string"
            }
          }
        },
        "shortDescription": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "votesCasted": {
          "type": "integer"
        },
        "votesNum": {
          "type": "integer"
        }
      }
    },
    "ProposalVoter": {
      "properties": {
        "blockLevel": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "proposal": {
          "type": "string"
        },
        "rolls": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Protocol": {
      "required": [
        "hash",
        "startBlock",
        "endBlock"
      ],
      "properties": {
        "endBlock": {
          "type": "integer",
          "format": "int64"
        },
        "hash": {
          "type": "string"
        },
        "startBlock": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PublicBaker": {
      "$ref": "#/definitions/BakersRow"
    },
    "PublicBakerSearch": {
      "properties": {
        "accountId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RequestUserProfile": {
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Snapshots": {
      "properties": {
        "cycle": {
          "type": "integer"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "rolls": {
          "type": "integer"
        },
        "snapshot_block": {
          "type": "integer"
        }
      }
    },
    "ThirdPartyBakers": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "baker": {
          "type": "string"
        },
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThirdPartyProvider"
          }
        }
      }
    },
    "ThirdPartyProvider": {
      "properties": {
        "address": {
          "type": "string"
        },
        "available_capacity": {
          "type": "integer",
          "format": "int64"
        },
        "efficiency": {
          "type": "number"
        },
        "fee": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "payout_accuracy": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "staking_balance": {
          "type": "integer",
          "format": "int64"
        },
        "yield": {
          "type": "number"
        }
      }
    },
    "TokenAssetRow": {
      "required": [
        "balance",
        "precision"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "created_at": {
          "type": "integer",
          "format": "int64"
        },
        "manager": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "precision": {
          "type": "integer",
          "format": "int64"
        },
        "total_supply": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TokenHolderRow": {
      "required": [
        "balance"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserAddress": {
      "required": [
        "address",
        "delegations_enabled",
        "in_transfers_enabled",
        "out_transfers_enabled"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "delegations_enabled": {
          "type": "boolean"
        },
        "in_transfers_enabled": {
          "type": "boolean"
        },
        "out_transfers_enabled": {
          "type": "boolean"
        }
      }
    },
    "UserAddressWithBalance": {
      "required": [
        "address",
        "delegations_enabled",
        "in_transfers_enabled",
        "out_transfers_enabled",
        "balance"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "delegations_enabled": {
          "type": "boolean"
        },
        "in_transfers_enabled": {
          "type": "boolean"
        },
        "out_transfers_enabled": {
          "type": "boolean"
        }
      }
    },
    "UserNote": {
      "properties": {
        "address": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "UserNoteWithBalance": {
      "required": [
        "address",
        "alias",
        "tag",
        "description",
        "balance"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "UserProfile": {
      "required": [
        "email",
        "username",
        "verified"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "VoteStats": {
      "properties": {
        "numVoters": {
          "type": "integer"
        },
        "numVotersTotal": {
          "type": "integer"
        },
        "votesAvailable": {
          "type": "integer"
        },
        "votesCast": {
          "type": "integer"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "TezTracker API",
    "version": "0.0.1"
  },
  "paths": {
    "/v2/data/profile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "getUserProfile",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user profile",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/address": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "createOrUpdateUserAddress",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create or update user address"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/addresses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "getUserAddresses",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user addresses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAddressWithBalance"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/delete/address": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "deleteUserAddress",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteUserAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user address"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/delete/note": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "deleteUserNote",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteUserNote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user note"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/note": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "createOrUpdateNote",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserNote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user note"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/notes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "getUserNotes",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user notes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserNoteWithBalance"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/update": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "updateProfile",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RequestUserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user profile"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/verify/email": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "verifyEmail",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Verified user email"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/profile/verify/email/token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "verifyEmailToken",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verified user email token"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/thirdparty/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getThirdPartyBakersHandler",
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThirdPartyBakers"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{network}/assets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetsList",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for tokens list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenAssetRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/assets/{asset_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetTokenInfo",
        "parameters": [
          {
            "type": "string",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for token holders",
            "schema": {
              "$ref": "#/definitions/TokenAssetRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/assets/{asset_id}/holders": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetTokenHoldersList",
        "parameters": [
          {
            "type": "string",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for token holders",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenHolderRow"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/assets/{asset_id}/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetOperationsList",
        "parameters": [
          {
            "type": "string",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for token operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetOperation"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/ballots/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getBallotsByPeriodID",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for ballots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BallotVoter"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/non_voters/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getNonVotersByPeriodID",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for ballots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonVoter"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/period": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getPeriod",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for periods",
            "schema": {
              "$ref": "#/definitions/PeriodInfo"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/periods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getPeriodsList",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for periods",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Period"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/proposal_votes/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getProposalVotesList",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for proposal votes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProposalVoter"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/proposals": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getProposalsByPeriodID",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "period_id",
            "in": "query"
          },
          {
            "maximum": 20,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for proposals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Proposal"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{network}/protocols": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Voting"
        ],
        "operationId": "getProtocolsList",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for protocols",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountBakingList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBakingRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/blocks/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountBakedBlocksList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlocksRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/future": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureBaking",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBakingRow"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/future_baking_rights/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureBakingRightsByCycle",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakingRightsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/baking/{accountId}/total": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountTotalBaking",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "$ref": "#/definitions/AccountBakingRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/balances/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountBalanceList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account balances",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBalance"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountEndorsingList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountEndorsingRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/endorsements/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountEndorsementsByCycleList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/future": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureEndorsing",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountEndorsingRow"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/future_endorsement_rights/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountFutureEndorsementRightsByCycle",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account future baking",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndorsementRightsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/endorsing/{accountId}/total": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountTotalEndorsing",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account baking",
            "schema": {
              "$ref": "#/definitions/AccountEndorsingRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/rewards/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountRewardsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account rewards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountRewardsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/security_deposit/{accountId}/future": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountSecurityDepositList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account rewards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSecurityDepositRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/top_balance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountsTopBalanceList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account",
            "schema": {
              "$ref": "#/definitions/AccountsRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/delegators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountDelegators",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for account delegators",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/delegators/{cycleId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountDelegatorsByCycleList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "cycleId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account rewards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakerDelegator"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/report": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountReport",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "to",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file to download",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/assets/{assetId}/report": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Assets"
        ],
        "operationId": "getAssetReport",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "assetId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "to",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file to download",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getBakersList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts ordered by staking balance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakersRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/baking_rights": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBakingRights",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 64,
            "minimum": 0,
            "type": "integer",
            "default": 10,
            "name": "priorities_to",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for baking rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakingRightsPerBlock"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlocksRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/head": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksHead",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks head",
            "schema": {
              "$ref": "#/definitions/BlocksRow"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Not initialized"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlock",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for block by hash",
            "schema": {
              "$ref": "#/definitions/BlockResult"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}/baking_rights": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlockBakingRights",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for baking rights of a block by hash or level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakingRightsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}/endorsements": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlockEndorsements",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for endorsements of a block by hash or level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/charts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getChartsInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "to",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "D"
            ],
            "type": "string",
            "name": "period",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "columns",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChartsData"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/charts/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getBakerChartInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 20,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakerChartData"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/charts/blocks_priority": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getBlocksPriorityChartInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockPriorityChartData"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/contracts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getContractsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for contract accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/double_bakings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getDoubleBakingsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/double_endorsements": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getDoubleEndorsementsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/future_baking_rights": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getFutureBakingRights",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 64,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "name": "priorities_to",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for future baking rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FutureBakingRightsPerBlock"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getHealthCheckInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application health info endpoint",
            "schema": {
              "$ref": "#/definitions/Health"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet",
              "carthagenet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "usd",
              "eur",
              "gbp",
              "cny"
            ],
            "type": "string",
            "default": "usd",
            "name": "currency",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "$ref": "#/definitions/Info"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/mempool": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mempool"
        ],
        "operationId": "getMempoolOperations",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for mempool operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MempoolOperation"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroups",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups/{operationGroupId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroup",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "operationGroupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation group",
            "schema": {
              "$ref": "#/definitions/OperationGroupResult"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getOperationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations/avgFees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Fees"
        ],
        "operationId": "getAvgFees",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for average fees",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/public_bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getPublicBakersList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "favorites accounts",
            "name": "favorites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts ordered by staking balance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicBaker"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/public_bakers/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getPublicBakersListForSearch",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts with name for search.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicBakerSearch"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/snapshots": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "getSnapshots",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for snapshots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Snapshots"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/{network}/ws": {
      "get": {
        "schemes": [
          "ws"
        ],
        "tags": [
          "WS"
        ],
        "operationId": "connectToWS",
        "parameters": [
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {},
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "AccountBakingRow": {
      "required": [
        "avgPriority",
        "missed",
        "stolen",
        "cycle",
        "rewards",
        "blocks",
        "totalDeposit"
      ],
      "properties": {
        "avgPriority": {
          "type": "number",
          "format": "float"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "missed": {
          "type": "integer",
          "format": "int64"
        },
        "rewards": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "stolen": {
          "type": "integer",
          "format": "int64"
        },
        "totalDeposit": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountBalance": {
      "required": [
        "timestamp",
        "balance"
      ],
      "properties": {
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountEndorsingRow": {
      "required": [
        "cycle",
        "missed",
        "rewards",
        "slots",
        "totalDeposit"
      ],
      "properties": {
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "missed": {
          "type": "integer",
          "format": "int64"
        },
        "rewards": {
          "type": "integer",
          "format": "int64"
        },
        "slots": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "totalDeposit": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountResult": {
      "type": "object",
      "required": [
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountsRow"
        }
      }
    },
    "AccountRewardsRow": {
      "required": [
        "cycle",
        "delegators",
        "stakingBalance",
        "endorsements",
        "baking",
        "losses",
        "fees"
      ],
      "properties": {
        "baking": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "delegators": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "losses": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "AccountSecurityDepositRow": {
      "properties": {
        "actual_blocks_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "actual_endorsement_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "actual_total_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "available_bond": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "expected_blocks_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "expected_endorsement_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "expected_total_deposit": {
          "type": "integer",
          "format": "int64"
        },
        "staking_balance": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "AccountsRow": {
      "type": "object",
      "required": [
        "balance",
        "accountId",
        "delegateSetable",
        "spendable",
        "manager",
        "counter",
        "blockLevel",
        "blockId",
        "revealed",
        "is_baker"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "bakerInfo": {
          "$ref": "#/definitions/BakerInfo"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "blockId": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "delegateName": {
          "type": "string"
        },
        "delegateSetable": {
          "type": "boolean"
        },
        "delegateValue": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "is_baker": {
          "type": "boolean"
        },
        "lastActive": {
          "type": "integer",
          "format": "int64"
        },
        "manager": {
          "type": "string"
        },
        "operations": {
          "type": "integer",
          "format": "int64"
        },
        "revealed": {
          "type": "boolean"
        },
        "script": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "storage": {
          "type": "string"
        },
        "transactions": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AssetOperation": {
      "required": [
        "amount",
        "fee",
        "gas_limit",
        "storage_limit"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "from": {
          "type": "string"
        },
        "gas_limit": {
          "type": "integer",
          "format": "int64"
        },
        "operation_group_hash": {
          "type": "string"
        },
        "storage_limit": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "to": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "BakerChartData": {
      "properties": {
        "baker": {
          "type": "string"
        },
        "baker_name": {
          "type": "string"
        },
        "percent": {
          "type": "number",
          "format": "float64"
        },
        "rolls": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BakerDelegator": {
      "required": [
        "delegator",
        "balance",
        "share",
        "cycle"
      ],
      "properties": {
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "delegator": {
          "type": "string"
        },
        "share": {
          "type": "number"
        }
      }
    },
    "BakerInfo": {
      "type": "object",
      "required": [
        "stakingBalance",
        "evaluatedBalance",
        "frozenBalance",
        "endorsementDeposits",
        "bakingDeposits",
        "endorsementRewards",
        "bakingRewards",
        "activeDelegators",
        "blocks",
        "endorsements",
        "rolls",
        "bakingSince",
        "fee",
        "stakingCapacity"
      ],
      "properties": {
        "activeDelegators": {
          "type": "integer",
          "format": "int64"
        },
        "bakingDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "bakingRewards": {
          "type": "integer",
          "format": "int64"
        },
        "bakingSince": {
          "type": "integer",
          "format": "int64"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementRewards": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "evaluatedBalance": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "frozenBalance": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "rolls": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        },
        "stakingCapacity": {
          "type": "integer",
          "format": "int64"
        },
        "totalPaidFees": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BakersRow": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "bakerInfo": {
          "$ref": "#/definitions/BakerInfo"
        }
      }
    },
    "BakingRightsPerBlock": {
      "required": [
        "baker_priority"
      ],
      "properties": {
        "baker": {
          "type": "string"
        },
        "baker_priority": {
          "type": "integer"
        },
        "block_hash": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BakingRightsRow"
          }
        }
      }
    },
    "BakingRightsRow": {
      "required": [
        "priority"
      ],
      "properties": {
        "delegate": {
          "type": "string"
        },
        "delegate_name": {
          "type": "string"
        },
        "deposit": {
          "type": "integer",
          "format": "int64"
        },
        "estimated_time": {
          "type": "string",
          "format": "date-time"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BallotVoter": {
      "properties": {
        "blockLevel": {
          "type": "integer"
        },
        "decision": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "rolls": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Ballots": {
      "properties": {
        "nay": {
          "type": "integer"
        },
        "pass": {
          "type": "integer"
        },
        "quorum": {
          "type": "number"
        },
        "supermajority": {
          "type": "number"
        },
        "yay": {
          "type": "integer"
        }
      }
    },
    "BlockPriorityChartData": {
      "required": [
        "cycle",
        "blocks",
        "zeroPriority",
        "firstPriority",
        "secondPriority",
        "thirdPriority"
      ],
      "properties": {
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "firstPriority": {
          "type": "integer",
          "format": "int64"
        },
        "secondPriority": {
          "type": "integer",
          "format": "int64"
        },
        "thirdPriority": {
          "type": "integer",
          "format": "int64"
        },
        "zeroPriority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BlockResult": {
      "type": "object",
      "required": [
        "block",
        "operation_groups"
      ],
      "properties": {
        "block": {
          "$ref": "#/definitions/BlocksRow"
        },
        "operation_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationGroupsRow"
          }
        }
      }
    },
    "BlocksRow": {
      "type": "object",
      "required": [
        "timestamp",
        "validationPass",
        "hash",
        "fitness",
        "proto",
        "protocol",
        "priority",
        "predecessor",
        "level",
        "reward"
      ],
      "properties": {
        "activate_accounts": {
          "type": "integer",
          "format": "int64"
        },
        "activeProposal": {
          "type": "string"
        },
        "baker": {
          "type": "string"
        },
        "bakerName": {
          "type": "string"
        },
        "ballots": {
          "type": "integer",
          "format": "int64"
        },
        "blockTime": {
          "type": "integer",
          "format": "int64"
        },
        "chainId": {
          "type": "string"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "context": {
          "type": "string"
        },
        "currentExpectedQuorum": {
          "type": "integer",
          "format": "int64"
        },
        "delegations": {
          "type": "integer",
          "format": "int64"
        },
        "deposit": {
          "type": "integer",
          "format": "int64"
        },
        "double_baking_evidence": {
          "type": "integer",
          "format": "int64"
        },
        "double_endorsement_evidence": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "expectedCommitment": {
          "type": "boolean"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "fitness": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "metaCycle": {
          "type": "integer",
          "format": "int64"
        },
        "metaCyclePosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevel": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevelPosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriodPosition": {
          "type": "integer",
          "format": "int64"
        },
        "nonceHash": {
          "type": "string"
        },
        "number_of_operations": {
          "type": "integer",
          "format": "int64"
        },
        "operationsHash": {
          "type": "string"
        },
        "originations": {
          "type": "integer",
          "format": "int64"
        },
        "periodKind": {
          "type": "string"
        },
        "predecessor": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "proposals": {
          "type": "integer",
          "format": "int64"
        },
        "proto": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        },
        "reveals": {
          "type": "integer",
          "format": "int64"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        },
        "seed_nonce_revelations": {
          "type": "integer",
          "format": "int64"
        },
        "signature": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "transactions": {
          "type": "integer",
          "format": "int64"
        },
        "validationPass": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ChartsData": {
      "required": [
        "timestamp"
      ],
      "properties": {
        "activations": {
          "type": "integer",
          "format": "int64"
        },
        "averageDelay": {
          "type": "number",
          "format": "float64"
        },
        "bakers": {
          "type": "integer",
          "format": "int64"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "delegationVolume": {
          "type": "integer",
          "format": "int64"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "operations": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "transactionVolume": {
          "type": "integer",
          "format": "int64"
        },
        "whale_accounts": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DeleteUserAddress": {
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "DeleteUserNote": {
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "DoubleOperationDetails": {
      "properties": {
        "baker_reward": {
          "type": "integer",
          "format": "int64"
        },
        "denounced_level": {
          "type": "integer",
          "format": "int64"
        },
        "evidence_baker": {
          "type": "string"
        },
        "evidence_baker_name": {
          "type": "string"
        },
        "lost_deposits": {
          "type": "integer",
          "format": "int64"
        },
        "lost_fees": {
          "type": "integer",
          "format": "int64"
        },
        "lost_rewards": {
          "type": "integer",
          "format": "int64"
        },
        "offender": {
          "type": "string"
        },
        "offender_name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EmailToken": {
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "EndorsementRightsRow": {
      "properties": {
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "delegate": {
          "type": "string"
        },
        "delegate_name": {
          "type": "string"
        },
        "deposit": {
          "type": "integer",
          "format": "int64"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FutureBakingRightsPerBlock": {
      "properties": {
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BakingRightsRow"
          }
        }
      }
    },
    "Health": {
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "Info": {
      "type": "object",
      "required": [
        "price",
        "price_24h_change"
      ],
      "properties": {
        "annual_yield": {
          "description": "Expected annual return in percents.",
          "type": "number"
        },
        "blocks_in_cycle": {
          "type": "integer"
        },
        "circulating_supply": {
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "market_cap": {
          "type": "number"
        },
        "price": {
          "type": "number"
        },
        "price_24h_change": {
          "type": "number"
        },
        "staking_ratio": {
          "description": "Staking ratio in percents (0-100).",
          "type": "number",
          "maximum": 100,
          "minimum": 0
        },
        "volume_24h": {
          "type": "number"
        }
      }
    },
    "MempoolOperation": {
      "properties": {
        "branch": {
          "type": "string"
        },
        "chain_id": {
          "type": "string"
        },
        "contents": {
          "type": "object"
        },
        "hash": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "NonVoter": {
      "properties": {
        "name": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "rolls": {
          "type": "integer"
        }
      }
    },
    "OperationGroupResult": {
      "type": "object",
      "required": [
        "operation_group",
        "operations"
      ],
      "properties": {
        "operation_group": {
          "$ref": "#/definitions/OperationGroupsRow"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationsRow"
          }
        }
      }
    },
    "OperationGroupsRow": {
      "type": "object",
      "required": [
        "protocol",
        "hash",
        "branch",
        "blockId"
      ],
      "properties": {
        "blockId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "chainId": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "OperationsRow": {
      "type": "object",
      "required": [
        "blockHash",
        "timestamp",
        "operationId",
        "operationGroupHash",
        "kind",
        "blockLevel",
        "confirmations"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "ballot": {
          "type": "string"
        },
        "blockHash": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "claimedAmount": {
          "type": "integer",
          "format": "int64"
        },
        "confirmations": {
          "type": "integer",
          "format": "int64"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "cycle": {
          "type": "integer",
          "format": "int64"
        },
        "delegatable": {
          "type": "boolean"
        },
        "delegate": {
          "type": "string"
        },
        "delegateName": {
          "type": "string"
        },
        "delegationAmount": {
          "type": "integer",
          "format": "int64"
        },
        "destination": {
          "type": "string"
        },
        "destinationName": {
          "type": "string"
        },
        "doubleOperationDetails": {
          "$ref": "#/definitions/DoubleOperationDetails"
        },
        "endorsementDeposit": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementReward": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "gasLimit": {
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "managerPubkey": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "operationGroupHash": {
          "type": "string"
        },
        "operationId": {
          "type": "integer",
          "format": "int64"
        },
        "originatedContracts": {
          "type": "string"
        },
        "paidStorageSizeDiff": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "proposal": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "reward": {
          "type": "integer",
          "format": "int64"
        },
        "script": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "slots": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "storage": {
          "type": "string"
        },
        "storageLimit": {
          "type": "integer",
          "format": "int64"
        },
        "storageSize": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Period": {
      "required": [
        "id"
      ],
      "properties": {
        "curLevel": {
          "type": "integer"
        },
        "endLevel": {
          "type": "integer"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        },
        "periodType": {
          "type": "string"
        },
        "startLevel": {
          "type": "integer"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PeriodInfo": {
      "properties": {
        "ballots": {
          "$ref": "#/definitions/Ballots"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "proposal": {
          "$ref": "#/definitions/Proposal"
        },
        "totalPeriods": {
          "type": "integer"
        },
        "voteStats": {
          "$ref": "#/definitions/VoteStats"
        },
        "winner": {
          "$ref": "#/definitions/Proposal"
        }
      }
    },
    "Proposal": {
      "properties": {
        "hash": {
          "type": "string"
        },
        "minQuorum": {
          "type": "integer"
        },
        "period": {
          "type": "integer"
        },
        "proposalFile": {
          "type": "string"
        },
        "proposer": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "pkh": {
              "type": "string"
            }
          }
        },
        "shortDescription": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "votesCasted": {
          "type": "integer"
        },
        "votesNum": {
          "type": "integer"
        }
      }
    },
    "ProposalVoter": {
      "properties": {
        "blockLevel": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "proposal": {
          "type": "string"
        },
        "rolls": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Protocol": {
      "required": [
        "hash",
        "startBlock",
        "endBlock"
      ],
      "properties": {
        "endBlock": {
          "type": "integer",
          "format": "int64"
        },
        "hash": {
          "type": "string"
        },
        "startBlock": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PublicBaker": {
      "$ref": "#/definitions/BakersRow"
    },
    "PublicBakerSearch": {
      "properties": {
        "accountId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RequestUserProfile": {
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Snapshots": {
      "properties": {
        "cycle": {
          "type": "integer"
        },
        "cycleEnd": {
          "type": "integer",
          "format": "int64"
        },
        "cycleStart": {
          "type": "integer",
          "format": "int64"
        },
        "rolls": {
          "type": "integer"
        },
        "snapshot_block": {
          "type": "integer"
        }
      }
    },
    "ThirdPartyBakers": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "baker": {
          "type": "string"
        },
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThirdPartyProvider"
          }
        }
      }
    },
    "ThirdPartyProvider": {
      "properties": {
        "address": {
          "type": "string"
        },
        "available_capacity": {
          "type": "integer",
          "format": "int64"
        },
        "efficiency": {
          "type": "number"
        },
        "fee": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "payout_accuracy": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "staking_balance": {
          "type": "integer",
          "format": "int64"
        },
        "yield": {
          "type": "number"
        }
      }
    },
    "TokenAssetRow": {
      "required": [
        "balance",
        "precision"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "created_at": {
          "type": "integer",
          "format": "int64"
        },
        "manager": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "precision": {
          "type": "integer",
          "format": "int64"
        },
        "total_supply": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TokenHolderRow": {
      "required": [
        "balance"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserAddress": {
      "required": [
        "address",
        "delegations_enabled",
        "in_transfers_enabled",
        "out_transfers_enabled"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "delegations_enabled": {
          "type": "boolean"
        },
        "in_transfers_enabled": {
          "type": "boolean"
        },
        "out_transfers_enabled": {
          "type": "boolean"
        }
      }
    },
    "UserAddressWithBalance": {
      "required": [
        "address",
        "delegations_enabled",
        "in_transfers_enabled",
        "out_transfers_enabled",
        "balance"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "delegations_enabled": {
          "type": "boolean"
        },
        "in_transfers_enabled": {
          "type": "boolean"
        },
        "out_transfers_enabled": {
          "type": "boolean"
        }
      }
    },
    "UserNote": {
      "properties": {
        "address": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "UserNoteWithBalance": {
      "required": [
        "address",
        "alias",
        "tag",
        "description",
        "balance"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "UserProfile": {
      "required": [
        "email",
        "username",
        "verified"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "VoteStats": {
      "properties": {
        "numVoters": {
          "type": "integer"
        },
        "numVotersTotal": {
          "type": "integer"
        },
        "votesAvailable": {
          "type": "integer"
        },
        "votesCast": {
          "type": "integer"
        }
      }
    }
  }
}`))
}
